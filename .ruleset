<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="pmd-eclipse"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
   <description>PMD Plugin preferences rule set</description>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidlosingexceptioninformation"
         language="java"
         message="Avoid statements in a catch block that invoke accessors on the exception without using the information"
         name="AvoidLosingExceptionInformation"
         since="4.2.6">
      <description>
Statements in a catch block that invoke accessors on the exception without using the information
only add to code size.  Either remove the invocation, or use the return result.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//CatchClause/Block/ExpressionStatement/MethodCall[
    pmd-java:matchesSig("java.lang.Throwable#getMessage()")
    or pmd-java:matchesSig("java.lang.Throwable#getLocalizedMessage()")
    or pmd-java:matchesSig("java.lang.Throwable#getCause()")
    or pmd-java:matchesSig("java.lang.Throwable#getStackTrace()")
    or pmd-java:matchesSig("java.lang.Object#toString()")
]</value>
         </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    } catch (SomeException se) {
        se.getMessage();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#useexplicittypes"
         language="java"
         message="Use Explicit Types"
         minimumLanguageVersion="10"
         name="UseExplicitTypes"
         since="7.0.0">
      <description>
Java 10 introduced the `var` keyword. This reduces the amount of code written because java can infer the type
from the initializer of the variable declaration.

This is essentially a trade-off: On the one hand, it can make code more readable by eliminating redundant
information. On the other hand, it can make code less readable by eliding useful information. There is no
blanket rule for when `var` should be used or shouldn't.

It may make sense to use `var` when the type is inherently clear upon reading the statement
(ie: assignment to either a literal value or a constructor call). Those use cases
can be enabled through properties.

Notice that lambda parameters are allowed, as they are already inferred  by default (the `var` keyword
is completely optional).

See also [Local Variable Type Inference Style Guidelines](https://openjdk.org/projects/amber/guides/lvti-style-guide).
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//LocalVariableDeclaration[@TypeInferred = true()]
    [not(VariableDeclarator[*[pmd-java:nodeIs("Literal")]]) or $allowLiterals = false()]
    [not(VariableDeclarator[ConstructorCall]) or $allowCtors = false()]</value>
         </property>
         <property description="Allow when variables are directly initialized with literals"
                   name="allowLiterals"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow when variables are directly initialized with a constructor call"
                   name="allowCtors"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#mdbandsessionbeannamingconvention"
         language="java"
         message="SessionBean or MessageBean should be suffixed by Bean"
         name="MDBAndSessionBeanNamingConvention"
         since="4.0">
      <description>
The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by 'Bean'.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
[
    (pmd-java:typeIs('javax.ejb.SessionBean')
     or pmd-java:typeIs('javax.ejb.MessageDrivenBean'))
    and not(ends-with(@SimpleName, 'Bean'))
]</value>
         </property>
      </properties>
      <example>

public class SomeBean implements SessionBean{}                  // proper name

public class MissingTheProperSuffix implements SessionBean {}   // non-standard name

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.multithreading.DoubleCheckedLockingRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#doublecheckedlocking"
         language="java"
         message="Double checked locking is not thread safe in Java."
         name="DoubleCheckedLocking"
         since="1.04">
      <description>
Partially created objects can be returned by the Double Checked Locking pattern when used in Java.
An optimizing JRE may assign a reference to the baz variable before it calls the constructor of the object the
reference points to.

Note: With Java 5, you can make Double checked locking work, if you declare the variable to be `volatile`.

For more details refer to: &lt;http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html&gt;
or &lt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&gt;
        </description>
      <priority>1</priority>
      <example>

public class Foo {
    /*volatile */ Object baz = null; // fix for Java5 and later: volatile
    Object bar() {
        if (baz == null) { // baz may be non-null yet not fully created
            synchronized(this) {
                if (baz == null) {
                    baz = new Object();
                }
              }
        }
        return baz;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#remotesessioninterfacenamingconvention"
         language="java"
         message="Remote Home interface of a Session EJB should be suffixed by 'Home'"
         name="RemoteSessionInterfaceNamingConvention"
         since="4.0">
      <description>
A Remote Home interface type of a Session EJB should be suffixed by 'Home'.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
[
    pmd-java:typeIs('javax.ejb.EJBHome')
    and not(ends-with(@SimpleName, 'Home'))
]</value>
         </property>
      </properties>
      <example>

public interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name

public interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#avoidprotectedmethodinfinalclassnotextending"
         language="java"
         message="Avoid protected methods in a final class that doesn't extend anything other than Object.  Change to private or package access."
         name="AvoidProtectedMethodInFinalClassNotExtending"
         since="5.1">
      <description>
Do not use protected methods in most final classes since they cannot be subclassed. This should
only be allowed in final classes that extend other classes with protected methods (whose
visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[@Final= true() and not(ExtendsList)]
/ClassBody
/MethodDeclaration[@Visibility="protected" and @Name != 'finalize']</value>
         </property>
      </properties>
      <example>

public final class Foo {
  private int bar() {}
  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?
}
 
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#useobjectforclearerapi"
         language="java"
         message="Rather than using a lot of String arguments, consider using a container object for those values."
         name="UseObjectForClearerAPI"
         since="4.2.6">
      <description>
When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class
will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information
as a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simpler
API (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some
point to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification to
your API.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[pmd-java:modifiers() = 'public']
    [count(FormalParameters/FormalParameter[pmd-java:typeIs('java.lang.String')]) &gt; 3]</value>
         </property>
      </properties>
      <example>

public class MyClass {
    public void connect(String username,
        String pssd,
        String databaseName,
        String databaseAdress)
        // Instead of those parameters object
        // would ensure a cleaner API and permit
        // to add extra data transparently (no code change):
        // void connect(UserData data);
    {

    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_errorprone.html#equalcomparison"
         language="ecmascript"
         message="Use '==='/'!==' to compare with true/false or Numbers"
         name="EqualComparison"
         since="5.0">
      <description>
Using == in condition may lead to unexpected results, as the variables are automatically casted to be of the
same type. The === operator avoids the casting.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression[
  (@Operator = '==' or @Operator = '!=')
  and
  (KeywordLiteral[@Literal = 'true' or @Literal = 'false'] or NumberLiteral)
]</value>
         </property>
      </properties>
      <example>

// Ok
if (someVar === true) {
  ...
}
// Ok
if (someVar !== 3) {
  ...
}
// Bad
if (someVar == true) {
  ...
}
// Bad
if (someVar != 3) {
  ...
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes"
         language="java"
         message="Avoid throwing raw exception types."
         name="AvoidThrowingRawExceptionTypes"
         since="1.8">
      <description>
Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,
Exception, or Error, use a subclassed exception or error instead.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ThrowStatement//ConstructorCall
 /ClassType[
 pmd-java:typeIsExactly('java.lang.Throwable')
or
 pmd-java:typeIsExactly('java.lang.Exception')
or
 pmd-java:typeIsExactly('java.lang.Error')
or
 pmd-java:typeIsExactly('java.lang.RuntimeException')
]</value>
         </property>
      </properties>
      <example>

public class Foo {
    public void bar() throws Exception {
        throw new Exception();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#forloopshouldbewhileloop"
         language="java"
         message="This for loop could be simplified to a while loop"
         name="ForLoopShouldBeWhileLoop"
         since="1.02">
      <description>
Some for loops can be simplified to while loops, this makes them more concise.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ForStatement[not(ForInit | ForUpdate) and count(*) = 2]</value>
         </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        for (;true;) true; // No Init or Update part, may as well be: while (true)
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#avoiddollarsigns"
         language="java"
         message="Avoid using dollar signs in variable/method/class/interface names"
         name="AvoidDollarSigns"
         since="1.5">
      <description>
Avoid using dollar signs in variable/method/class/interface names.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration           [contains(@SimpleName, '$')]
    | //EnumDeclaration            [contains(@SimpleName, '$')]
    | //AnnotationTypeDeclaration  [contains(@SimpleName, '$')]
    | //RecordDeclaration          [contains(@SimpleName, '$')]
    | //VariableId                 [contains(@Name, '$')]
    | //MethodDeclaration          [contains(@Name, '$')]</value>
         </property>
      </properties>
      <example>

public class Fo$o {  // not a recommended name
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.UselessOverridingMethodRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#uselessoverridingmethod"
         language="java"
         message="Overriding method merely calls super"
         name="UselessOverridingMethod"
         since="3.3">
      <description>
The overriding method merely calls the same method defined in a superclass.
        </description>
      <priority>3</priority>
      <example>

public void foo(String bar) {
    super.foo(bar);      // why bother overriding?
}

public String foo() {
    return super.foo();  // why bother overriding?
}

@Id
public Long getId() {
    return super.getId();  // OK if 'ignoreAnnotations' is false, which is the default behavior
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#missingstaticmethodinnoninstantiatableclass"
         language="java"
         message="Class cannot be instantiated and does not provide any static methods or fields"
         name="MissingStaticMethodInNonInstantiatableClass"
         since="3.0">
      <description>
A class that has private constructors and does not have any static methods or fields cannot be used.

When one of the private constructors is annotated with one of the annotations, then the class is not considered
non-instantiatable anymore and no violation will be reported.
See the property `annotations`.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>let $topLevelClass := /*/ClassDeclaration return
let $isLombokUtility := exists($topLevelClass[pmd-java:hasAnnotation('lombok.experimental.UtilityClass')]) return
$topLevelClass[
        (: non-instantiable :)
        $isLombokUtility or
        (
            (: no lombok produced constructors :)
            not(pmd-java:hasAnnotation('lombok.NoArgsConstructor') or
                pmd-java:hasAnnotation('lombok.RequiredArgsConstructor') or
                pmd-java:hasAnnotation('lombok.AllArgsConstructor')) and
            (: or has non-default constructors 占쎈쐻占쎈짗占쎌굲 :)
            ClassBody/ConstructorDeclaration and
                (: 占쎈쐻占쎈짗占쎌굲 but only private 占쎈쐻占쎈짗占쎌굲 :)
                not(ClassBody/ConstructorDeclaration[@Visibility != "private"]) and
                (: 占쎈쐻占쎈짗占쎌굲 and none annotated 占쎈쐻占쎈짗占쎌굲 :)
                (every $x in $annotations satisfies
                      not(ClassBody/ConstructorDeclaration/ModifierList/Annotation[pmd-java:typeIs($x)]))
        )
    ]
    [
        (: With no visible static methods 占쎈쐻占쎈짗占쎌굲 :)
        not(ClassBody/MethodDeclaration[($isLombokUtility or pmd-java:modifiers() = "static") and @Visibility != "private"]) and
        (: 占쎈쐻占쎈짗占쎌굲 nor fields 占쎈쐻占쎈짗占쎌굲 :)
        not(ClassBody/FieldDeclaration[($isLombokUtility or pmd-java:modifiers() = "static") and @Visibility != "private"]) and
        (: 占쎈쐻占쎈쑆�얜〕�삕占쎌몢o nested classes, that are non-private and static 占쎈쐻占쎈짗占쎌굲 :)
        not(ClassBody/ClassDeclaration
            [pmd-java:modifiers() = "static" and @Visibility != "private"]
            (: 占쎈쐻占쎈쑆�얜〕�삕占쎌몺ith a default or non-private constructor 占쎈쐻占쎈짗占쎌굲 :)
            [not(ClassBody/ConstructorDeclaration) or ClassBody/ConstructorDeclaration[@Visibility != "private"]]
            (: 占쎈쐻占쎈쑆�얜〕�삕占쎌맲nd a non-private method returning the outer class type 占쎈쐻占쎈짗占쎌굲 :)
            [(ClassBody/MethodDeclaration
                [@Visibility != "private"]
                [descendant::ReturnStatement/*[1][pmd-java:typeIs(ancestor::ClassDeclaration[@Nested = false()]/@BinaryName)]]
            ) or (
                (: 占쎈쐻占쎈짗占쎌굲 or the inner class extends the outer class :)
                ExtendsList/ClassType[@SimpleName = ancestor::ClassDeclaration[@Nested = false()]/@SimpleName]
            )]
    )]</value>
         </property>
         <property description="If a constructor is annotated with one of these annotations, then the class is ignored."
                   name="annotations"
                   type="List[String]">
            <value>org.springframework.beans.factory.annotation.Autowired,javax.inject.Inject,com.google.inject.Inject</value>
         </property>
      </properties>
      <example>

// This class is unusable, since it cannot be
// instantiated (private constructor),
// and no static method can be called.

public class Foo {
  private Foo() {}
  void foo() {}
}


        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#replacehashtablewithmap"
         language="java"
         message="Consider replacing this Hashtable with the newer java.util.Map"
         name="ReplaceHashtableWithMap"
         since="3.4">
      <description>
Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassType[pmd-java:typeIsExactly('java.util.Hashtable')]</value>
         </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        Hashtable h = new Hashtable();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#shortvariable"
         language="java"
         message="Avoid variables with short names like {0}"
         name="ShortVariable"
         since="0.3">
      <description>
Fields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//VariableId[string-length(@Name) &lt; $minimum]
 (: ForStatement :)
 [not(../../parent::ForInit)]
 (: Foreach statement :)
 [not(../../parent::ForeachStatement)]
 (: Catch statement parameter :)
 [not(parent::CatchParameter)]
 (: Lambda expression parameter :)
 [not(parent::LambdaParameter)]</value>
         </property>
         <property description="Number of characters that are required as a minimum for a variable name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>3</value>
         </property>
      </properties>
      <example>

public class Something {
    private int q = 15;                         // field - too short
    public static void main( String as[] ) {    // formal arg - too short
        int r = 20 + q;                         // local var - too short
        for (int i = 0; i &lt; 10; i++) {          // not a violation (inside 'for' loop)
            r += q;
        }
        for (Integer i : numbers) {             // not a violation (inside 'for-each' loop)
            r += q;
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#morethanonelogger"
         language="java"
         message="Class contains more than one logger."
         name="MoreThanOneLogger"
         since="2.0">
      <description>
Normally only one logger is used in each class. This rule supports slf4j, log4j, Java Util Logging and
log4j2 (since 6.19.0).
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[
  count(
    ClassBody/FieldDeclaration/ClassType[
      pmd-java:typeIs("org.apache.log4j.Logger") or
      pmd-java:typeIs("org.apache.logging.log4j.Logger") or
      pmd-java:typeIs("java.util.logging.Logger") or
      pmd-java:typeIs("org.slf4j.Logger")
    ]
  ) &gt; 1
]</value>
         </property>
      </properties>
      <example>

public class Foo {
    Logger log = Logger.getLogger(Foo.class.getName());
    // It is very rare to see two loggers on a class, normally
    // log information is multiplexed by levels
    Logger log2= Logger.getLogger(Foo.class.getName());
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition"
         language="java"
         message="Avoid using literals in if statements"
         name="AvoidLiteralsInIfCondition"
         since="4.2.6">
      <description>
Avoid using hard-coded literals in conditional statements. By declaring them as static variables
or private members with descriptive names maintainability is enhanced. By default, the literals "-1" and "0" are ignored.
More exceptions can be defined with the property "ignoreMagicNumbers".

The rule doesn't consider deeper expressions by default, but this can be enabled via the property `ignoreExpressions`.
With this property set to false, if-conditions like `i == 1 + 5` are reported as well. Note that in that case,
the property ignoreMagicNumbers is not taken into account, if there are multiple literals involved in such an expression.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>(: simple case - no deep expressions - this is always executed :)
//IfStatement/*[1]/*[pmd-java:nodeIs('Literal')]
    [not(pmd-java:nodeIs('NullLiteral'))]
    [not(pmd-java:nodeIs('BooleanLiteral'))]
    [empty(index-of(tokenize($ignoreMagicNumbers, '\s*,\s*'), @Image))]
|
(: consider also deeper expressions :)
//IfStatement[$ignoreExpressions = false()]/*[1]//*[not(self::UnaryExpression[@Operator = '-'])]/*[pmd-java:nodeIs('Literal')]
    [not(pmd-java:nodeIs('NullLiteral'))]
    [not(pmd-java:nodeIs('BooleanLiteral'))]
    [empty(index-of(tokenize($ignoreMagicNumbers, '\s*,\s*'), @Image))]
|
(: consider negative literals :)
//IfStatement[$ignoreExpressions = false()]/*[1]//UnaryExpression[@Operator = '-']/*[pmd-java:nodeIs('Literal')]
    [not(pmd-java:nodeIs('NullLiteral'))]
    [not(pmd-java:nodeIs('BooleanLiteral'))]
    [empty(index-of(tokenize($ignoreMagicNumbers, '\s*,\s*'), concat('-', @Image)))]
|
(: consider multiple literals in expressions :)
//IfStatement[$ignoreExpressions = false()]/*[1][count(*[pmd-java:nodeIs('Literal')]
    [not(pmd-java:nodeIs('NullLiteral'))]
    [not(pmd-java:nodeIs('BooleanLiteral'))]) &gt; 1]</value>
         </property>
         <property description="Comma-separated list of magic numbers, that should be ignored"
                   name="ignoreMagicNumbers"
                   type="String">
            <value>-1,0</value>
         </property>
         <property description="If true, only literals in simple if conditions are considered. Otherwise literals in expressions are checked, too."
                   name="ignoreExpressions"
                   type="Boolean">
            <value>true</value>
         </property>
      </properties>
      <example>

private static final int MAX_NUMBER_OF_REQUESTS = 10;

public void checkRequests() {

    if (i == 10) {                        // magic number, buried in a method
      doSomething();
    }

    if (i == MAX_NUMBER_OF_REQUESTS) {    // preferred approach
      doSomething();
    }

    if (aString.indexOf('.') != -1) {}     // magic number -1, by default ignored
    if (aString.indexOf('.') &gt;= 0) { }     // alternative approach

    if (aDouble &gt; 0.0) {}                  // magic number 0.0
    if (aDouble &gt;= Double.MIN_VALUE) {}    // preferred approach

    // with rule property "ignoreExpressions" set to "false"
    if (i == pos + 5) {}  // violation: magic number 5 within an (additive) expression
    if (i == pos + SUFFIX_LENGTH) {} // preferred approach
    if (i == 5 &amp;&amp; "none".equals(aString)) {} // 2 violations: magic number 5 and literal "none"
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_errorprone.html#avoidtrailingcomma"
         language="ecmascript"
         message="Avoid trailing commas in object or array literals"
         name="AvoidTrailingComma"
         since="5.1">
      <description>
This rule helps improve code portability due to differences in browser treatment of trailing commas in object or array literals.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ObjectLiteral[$allowObjectLiteral = false() and @TrailingComma = true()]
|
//ArrayLiteral[$allowArrayLiteral = false() and @TrailingComma = true()]</value>
         </property>
         <property description="Allow a trailing comma within an object literal"
                   name="allowObjectLiteral"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow a trailing comma within an array literal"
                   name="allowArrayLiteral"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
      <example>

function(arg) {
    var obj1 = { a : 1 };   // Ok
    var arr1 = [ 1, 2 ];    // Ok

    var obj2 = { a : 1, };  // Syntax error in some browsers!
    var arr2 = [ 1, 2, ];   // Length 2 or 3 depending on the browser!
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitAssertionsShouldIncludeMessageRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage"
         language="java"
         message="JUnit assertions should include a message"
         name="JUnitAssertionsShouldIncludeMessage"
         since="1.04">
      <description>
JUnit assertions should include an informative message - i.e., use the three-argument version of
assertEquals(), not the two-argument version.
        </description>
      <priority>3</priority>
      <example>

public class Foo extends TestCase {
    public void testSomething() {
        assertEquals("foo", "bar");
        // Use the form:
        // assertEquals("Foo does not equals bar", "foo", "bar");
        // instead
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_codestyle.html#noelsereturn"
         language="ecmascript"
         message="The else block is unnecessary"
         name="NoElseReturn"
         since="5.5.0">
      <description>
The else block in a if-else-construct is unnecessary if the `if` block contains a return.
Then the content of the else block can be put outside.

See also: &lt;http://eslint.org/docs/rules/no-else-return&gt;
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//IfStatement[@Else=true()][Scope[1]/ReturnStatement]</value>
         </property>
      </properties>
      <example>

// Bad:
if (x) {
    return y;
} else {
    return z;
}

// Good:
if (x) {
    return y;
}
return z;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#usestandardcharsets"
         language="java"
         message="Please use StandardCharsets constants"
         minimumLanguageVersion="1.7"
         name="UseStandardCharsets"
         since="6.34.0">
      <description>
Starting with Java 7, StandardCharsets provides constants for common Charset objects, such as UTF-8.
Using the constants is less error prone, and can provide a small performance advantage compared to `Charset.forName(...)`
since no scan across the internal `Charset` caches is needed.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[@MethodName = 'forName'][pmd-java:typeIs('java.nio.charset.Charset')]
    [
        ArgumentList/StringLiteral
            [@Image = ('"US-ASCII"', '"ISO-8859-1"', '"UTF-8"', '"UTF-16BE"', '"UTF-16LE"', '"UTF-16"')]
    ]</value>
         </property>
      </properties>
      <example>

public class UseStandardCharsets {
    public void run() {

        // looking up the charset dynamically
        try (OutputStreamWriter osw = new OutputStreamWriter(out, Charset.forName("UTF-8"))) {
            osw.write("test");
        }

        // best to use StandardCharsets
        try (OutputStreamWriter osw = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {
            osw.write("test");
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidmultipleunaryoperators"
         language="java"
         message="Using multiple unary operators may be a bug, and/or is confusing."
         name="AvoidMultipleUnaryOperators"
         since="4.2">
      <description>
The use of multiple unary operators may be problematic, and/or confusing.
Ensure that the intended usage is not a bug, or consider simplifying the expression.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>(: Only report on the toplevel one :)
                    //UnaryExpression[UnaryExpression and not(parent::UnaryExpression)]</value>
         </property>
      </properties>
      <example>

// These are typo bugs, or at best needlessly complex and confusing:
int i = - -1;
int j = + - +1;
int z = ~~2;
boolean b = !!true;
boolean c = !!!true;

// These are better:
int i = 1;
int j = -1;
int z = 2;
boolean b = true;
boolean c = false;

// And these just make your brain hurt:
int i = ~-2;
int j = -~7;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.documentation.CommentSizeRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_documentation.html#commentsize"
         language="java"
         message="Comment is too large"
         name="CommentSize"
         since="5.0">
      <description>
Determines whether the dimensions of non-header comments found are within the specified limits.
        </description>
      <priority>3</priority>
      <example>

/**
*
*   too many lines!
*
*
*
*
*
*
*
*
*
*
*
*
*/

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateFieldRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#unusedprivatefield"
         language="java"
         message="Avoid unused private fields such as ''{0}''."
         name="UnusedPrivateField"
         since="0.1">
      <description>
Detects when a private field is declared and/or assigned a value, but not used.

Since PMD 6.50.0 private fields are ignored, if the fields are annotated with any annotation or the
enclosing class has any annotation. Annotations often enable a framework (such as dependency injection, mocking
or e.g. Lombok) which use the fields by reflection or other means. This usage can't be detected by static code analysis.
Previously these frameworks where explicitly allowed by listing their annotations in the property
"ignoredAnnotations", but that turned out to be prone of false positive for any not explicitly considered framework.
        </description>
      <priority>3</priority>
      <example>

public class Something {
    private static int FOO = 2; // Unused
    private int i = 5; // Unused
    private int j = 6;
    public int addOne() {
        return j++;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#switchdensity"
         language="java"
         message="A high ratio of statements to labels in a switch statement.  Consider refactoring."
         name="SwitchDensity"
         since="1.02">
      <description>
A high ratio of statements to labels in a switch statement implies that the switch statement
is overloaded.  Consider moving the statements into new methods or creating subclasses based
on the switch variable.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
  public void bar(int x) {
    switch (x) {
      case 1: {
        // lots of statements
        break;
      } case 2: {
        // lots of statements
        break;
      }
    }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#emptyfinalizer"
         language="java"
         message="Avoid empty finalize methods"
         name="EmptyFinalizer"
         since="1.5">
      <description>
Empty finalize methods serve no purpose and should be removed. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name='finalize'][@Arity = 0]
  /Block[not(*)]</value>
         </property>
      </properties>
      <example>

public class Foo {
   protected void finalize() {}
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.CheckSkipResultRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#checkskipresult"
         language="java"
         message="Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
         name="CheckSkipResult"
         since="5.0">
      <description>
The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.
        </description>
      <priority>3</priority>
      <example>

public class Foo {

   private FileInputStream _s = new FileInputStream("file");

   public void skip(int n) throws IOException {
      _s.skip(n); // You are not sure that exactly n bytes are skipped
   }

   public void skipExactly(int n) throws IOException {
      while (n != 0) {
         long skipped = _s.skip(n);
         if (skipped == 0)
            throw new EOFException();
         n -= skipped;
      }
   }

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#callsuperfirst"
         language="java"
         message="super should be called at the start of the method"
         name="CallSuperFirst"
         since="4.2.5">
      <description>Super should be called at the start of the method</description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
    [
      pmd-java:typeIs('android.app.Activity') or
      pmd-java:typeIs('android.app.Application') or
      pmd-java:typeIs('android.app.Service')
    ]
    //MethodDeclaration
    [
      @Name=('onCreate', 'onConfigurationChanged', 'onPostCreate', 'onPostResume', 'onRestart',
             'onRestoreInstanceState', 'onResume', 'onStart')
    ]
    [not(Block/*[1]/MethodCall[SuperExpression][@MethodName = ancestor::MethodDeclaration/@Name])]</value>
         </property>
      </properties>
      <example>

import android.app.Activity;
import android.os.Bundle;

public class DummyActivity extends Activity {
    public void onCreate(Bundle bundle) {
        // missing call to super.onCreate(bundle)
        foo();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_bestpractices.html#globalvariable"
         language="ecmascript"
         message="Avoid using global variables"
         name="GlobalVariable"
         since="5.0">
      <description>
This rule helps to avoid using accidently global variables by simply missing the "var" declaration.
Global variables can lead to side-effects that are hard to debug.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//Assignment[Name/@GlobalName = true()]</value>
         </property>
      </properties>
      <example>

function(arg) {
    notDeclaredVariable = 1;    // this will create a global variable and trigger the rule

    var someVar = 1;            // this is a local variable, that's ok

    window.otherGlobal = 2;     // this will not trigger the rule, although it is a global variable.
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#uselocalewithcaseconversions"
         language="java"
         message="When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
         name="UseLocaleWithCaseConversions"
         since="2.0">
      <description>
When doing `String::toLowerCase()/toUpperCase()` conversions, use an explicit locale argument to specify the case
transformation rules.

Using `String::toLowerCase()` without arguments implicitly uses `Locale::getDefault()`.
The problem is that the default locale depends on the current JVM setup (and usually on the system in which
it is running). Using the system default may be exactly what you want (e.g. if you are manipulating strings
you got through standard input), but it may as well not be the case (e.g. if you are getting the string over
the network or a file, and the encoding is well-defined and independent of the environment). In the latter case,
using the default locale makes the case transformation brittle, as it may yield unexpected results on a machine
whose locale has other case translation rules. For example, in Turkish, the uppercase form of `i` is `嶺뚳옙�뜝占�` (U+0130,
not ASCII) and not `I` (U+0049) as in English.

The rule is intended to *force* developers to think about locales when dealing with strings. By taking a
conscious decision about the choice of locale at the time of writing, you reduce the risk of surprising
behaviour down the line, and communicate your intent to future readers.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[pmd-java:matchesSig("java.lang.String#toLowerCase()") or pmd-java:matchesSig("java.lang.String#toUpperCase()")]
            [not(MethodCall[@MethodName = "toHexString"])]</value>
         </property>
      </properties>
      <example>

// violation - implicitly system-dependent conversion
if (x.toLowerCase().equals("list")) {}

// The above will not match "LIST" on a system with a Turkish locale.
// It could be replaced with
if (x.toLowerCase(Locale.US).equals("list")) { }
// or simply
if (x.equalsIgnoreCase("list")) { }

// ok - system independent conversion
String z = a.toLowerCase(Locale.ROOT);

// ok - explicit system-dependent conversion
String z2 = a.toLowerCase(Locale.getDefault());

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#staticejbfieldshouldbefinal"
         language="java"
         message="EJB's shouldn't have non-final static fields"
         name="StaticEJBFieldShouldBeFinal"
         since="4.1">
      <description>
According to the J2EE specification, an EJB should not have any static fields
with write access. However, static read-only fields are allowed. This ensures proper
behavior especially when instances are distributed by the container on several JREs.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[ImplementsList/ClassType[
        pmd-java:typeIs('javax.ejb.SessionBean')
     or pmd-java:typeIs('javax.ejb.EJBHome')
     or pmd-java:typeIs('javax.ejb.EJBLocalObject')
     or pmd-java:typeIs('javax.ejb.EJBLocalHome')
     or pmd-java:typeIs('javax.ejb.EJBObject')
    ]]
    /ClassBody/FieldDeclaration
        [pmd-java:modifiers() = 'static']
        [not(pmd-java:modifiers() = 'final')]</value>
         </property>
      </properties>
      <example>

public class SomeEJB extends EJBObject implements EJBLocalHome {

    private static int CountA;          // poor, field can be edited

    private static final int CountB;    // preferred, read-only access
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.NPathComplexityRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#npathcomplexity"
         language="java"
         message="The {0} ''{1}'' has an NPath complexity of {2}, current threshold is {3}"
         name="NPathComplexity"
         since="3.9">
      <description>
The NPath complexity of a method is the number of acyclic execution paths through that method.
While cyclomatic complexity counts the number of decision points in a method, NPath counts the number of
full paths from the beginning to the end of the block of the method. That metric grows exponentially, as
it multiplies the complexity of statements in the same block. For more details on the calculation, see the
documentation {% jdoc java::lang.java.metrics.JavaMetrics#NPATH %}.

A threshold of 200 is generally considered the point where measures should be taken to reduce
complexity and increase readability.
        </description>
      <priority>3</priority>
      <example>
            
public class Foo {
  public static void bar() { // Ncss = 252: reported!
    boolean a, b = true;
    try { // 2 * 2 + 2 = 6
      if (true) { // 2
        List buz = new ArrayList();
      }

      for(int i = 0; i &lt; 19; i++) { // * 2
        List buz = new ArrayList();
      }
    } catch(Exception e) {
      if (true) { // 2
        e.printStackTrace();
      }
    }

    while (j++ &lt; 20) { //  * 2
      List buz = new ArrayList();
    }

    switch(j) { // * 7
      case 1:
      case 2: break;
      case 3: j = 5; break;
      case 4: if (b &amp;&amp; a) { bar(); } break;
      default: break;
    }

    do { // * 3
        List buz = new ArrayList();
    } while (a &amp;&amp; j++ &lt; 30);
  }
}
 
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#doublebraceinitialization"
         language="java"
         message="Double-brace initialization should be avoided"
         name="DoubleBraceInitialization"
         since="6.16.0">
      <description>
            Double brace initialisation is a pattern to initialise eg collections concisely. But it implicitly
            generates a new .class file, and the object holds a strong reference to the enclosing object. For those
            reasons, it is preferable to initialize the object normally, even though it's verbose.

            This rule counts any anonymous class which only has a single initializer as an instance of double-brace
            initialization. There is currently no way to find out whether a method called in the initializer is not
            accessible from outside the anonymous class, and those legit cases should be suppressed for the time being.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ConstructorCall/AnonymousClassDeclaration/ClassBody[count(*)=1]/Initializer[@Static=false()]</value>
         </property>
      </properties>
      <example>
// this is double-brace initialization
return new ArrayList&lt;String&gt;(){{
    add("a");
    add("b");
    add("c");
}};

// the better way is to not create an anonymous class:
List&lt;String&gt; a = new ArrayList&lt;&gt;();
a.add("a");
a.add("b");
a.add("c");
return a;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename"
         language="java"
         message="It is somewhat confusing to have a field name matching the declaring class name"
         name="AvoidFieldNameMatchingTypeName"
         since="3.0">
      <description>
It is somewhat confusing to have a field name matching the declaring type name.
This probably means that type and/or field names should be chosen more carefully.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration/VariableDeclarator/VariableId
    [lower-case(@Name) = lower-case(ancestor::ClassDeclaration[1]/@SimpleName)]</value>
         </property>
      </properties>
      <example>

public class Foo extends Bar {
    int foo;    // There is probably a better name that can be used
}
public interface Operation {
    int OPERATION = 1; // There is probably a better name that can be used
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#jumbledincrementer"
         language="java"
         message="Avoid modifying an outer loop incrementer in an inner loop for update expression"
         name="JumbledIncrementer"
         since="1.0">
      <description>
Avoid jumbled loop incrementers - it's usually a mistake, and is confusing even if intentional.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ForStatement
    [not(ForInit) or ForInit//VariableId/@Name != ForUpdate//VariableAccess/@Name]
    [ForUpdate//VariableAccess[@AccessType = 'WRITE']/@Name
     =
     ancestor::ForStatement/ForInit//VariableId/@Name
    ]</value>
         </property>
      </properties>
      <example>
 
public class JumbledIncrementerRule1 {
    public void foo() {
        for (int i = 0; i &lt; 10; i++) {          // only references 'i'
            for (int k = 0; k &lt; 20; i++) {      // references both 'i' and 'k'
                System.out.println("Hello");
            }
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedAssignmentRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#unusedassignment"
         language="java"
         message="The value assigned to this variable is never used or always overwritten"
         name="UnusedAssignment"
         since="6.26.0">
      <description>
            Reports assignments to variables that are never used before the variable is overwritten,
            or goes out of scope. Unused assignments are those for which
            1. The variable is never read after the assignment, or
            2. The assigned value is always overwritten by other assignments before the next read of
            the variable.

            The rule doesn't consider assignments to fields except for those of `this` in a constructor,
            or static fields of the current class in static initializers.

            The rule may be suppressed with the standard `@SuppressWarnings("unused")` tag.

            The rule subsumes {% rule "UnusedLocalVariable" %}, and {% rule "UnusedFormalParameter" %}.
            Those violations are filtered
            out by default, in case you already have enabled those rules, but may be enabled with the property
            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as
            is standard practice for exceptions.

            Limitations:
            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.
            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.
            The only other language construct that is assumed to throw is the `throw` statement, in particular,
            things like `assert` statements, or NullPointerExceptions on dereference are ignored.
            * The rule cannot resolve assignments across constructors, when they're called with the special
            `this(...)` syntax. This may cause false-negatives.

            Both of those limitations may be partly relaxed in PMD 7.
        </description>
      <priority>3</priority>
      <example>
            
            class A {
                // this field initializer is redundant,
                // it is always overwritten in the constructor
                int f = 1;

                A(int f) {
                    this.f = f;
                }
            }
        
        </example>
      <example>
class B {

    int method(int i, int j) {
        // this initializer is redundant,
        // it is overwritten in all branches of the `if`
        int k = 0;

        // Both the assignments to k are unused, because k is
        // not read after the if/else
        // This may hide a bug: the programmer probably wanted to return k
        if (i &lt; j)
            k = i;
        else
            k = j;

        return j;
    }

}
        

        </example>
      <example>
class C {

    int method() {
        int i = 0;

        checkSomething(++i);
        checkSomething(++i);
        checkSomething(++i);
        checkSomething(++i);

        // That last increment is not reported unless
        // the property `checkUnusedPrefixIncrement` is
        // set to `true`
        // Technically it could be written (i+1), but it
        // is not very important
    }

}
        

        </example>
      <example>
class C {

    // variables that are truly unused (at most assigned to, but never accessed)
    // are only reported if property `reportUnusedVariables` is true

    void method(int param) { } // for example this method parameter

    // even then, you can suppress the violation with an annotation:

    void method(@SuppressWarning("unused") int param) { } // no violation, even if `reportUnusedVariables` is true

    // For catch parameters, or for resources which don't need to be used explicitly,
    // you can give a name that starts with "ignored" to ignore such warnings

    {
        try (Something ignored = Something.create()) {
            // even if ignored is unused, it won't be flagged
            // its purpose might be to side-effect in the create/close routines

        } catch (Exception e) { // this is unused and will cause a warning if `reportUnusedVariables` is true
            // you should choose a name that starts with "ignored"
            return;
        }
    }

}
        

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#remoteinterfacenamingconvention"
         language="java"
         message="Remote Interface of a Session EJB should NOT be suffixed"
         name="RemoteInterfaceNamingConvention"
         since="4.0">
      <description>
Remote Interface of a Session EJB should not have a suffix.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
[
    pmd-java:typeIs('javax.ejb.EJBObject')
    and matches(@SimpleName, '.*(Session|EJB|Bean)$')
]</value>
         </property>
      </properties>
      <example>

/* Poor Session suffix */
public interface BadSuffixSession extends javax.ejb.EJBObject {}

/* Poor EJB suffix */
public interface BadSuffixEJB extends javax.ejb.EJBObject {}

/* Poor Bean suffix */
public interface BadSuffixBean extends javax.ejb.EJBObject {}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#stringbufferinstantiationwithchar"
         language="java"
         message="Do not instantiate a StringBuffer or StringBuilder with a char"
         name="StringBufferInstantiationWithChar"
         since="3.9">
      <description>
Individual character values provided as initialization arguments will be converted into integers.
This can lead to internal buffer sizes that are larger than expected. Some examples:

```
new StringBuffer()      //  16
new StringBuffer(6)     //  6
new StringBuffer("hello world")  // 11 + 16 = 27
new StringBuffer('A')   //  chr(A) = 65
new StringBuffer("A")   //  1 + 16 = 17

new StringBuilder()     //  16
new StringBuilder(6)    //  6
new StringBuilder("hello world")  // 11 + 16 = 27
new StringBuilder('C')   //  chr(C) = 67
new StringBuilder("A")   //  1 + 16 = 17
```
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ConstructorCall[ArgumentList/CharLiteral]
    [pmd-java:typeIs('java.lang.StringBuilder') or pmd-java:typeIs('java.lang.StringBuffer')]</value>
         </property>
      </properties>
      <example>

// misleading instantiation, these buffers
// are actually sized to 99 characters long
StringBuffer  sb1 = new StringBuffer('c');
StringBuilder sb2 = new StringBuilder('c');

// in these forms, just single characters are allocated
StringBuffer  sb3 = new StringBuffer("c");
StringBuilder sb4 = new StringBuilder("c");

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ClassWithOnlyPrivateConstructorsShouldBeFinalRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal"
         language="java"
         message="This class has only private constructors and may be final"
         name="ClassWithOnlyPrivateConstructorsShouldBeFinal"
         since="4.1">
      <description>
Reports classes that may be made final because they cannot be extended from outside
their compilation unit anyway. This is because all their constructors are private,
so a subclass could not call the super constructor.
        </description>
      <priority>1</priority>
      <example>

public class Foo {  //Should be final
    private Foo() { }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidUsingHardCodedIPRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidusinghardcodedip"
         language="java"
         message="Do not hard code the IP address ${variableName}"
         name="AvoidUsingHardCodedIP"
         since="4.1">
      <description>
Application with hard-coded IP addresses can become impossible to deploy in some cases.
Externalizing IP adresses is preferable.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    private String ip = "127.0.0.1";     // not recommended
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#dontusefloattypeforloopindices"
         language="java"
         message="Don't use floating point for loop indices. If you must use floating point, use double."
         name="DontUseFloatTypeForLoopIndices"
         since="4.3">
      <description>
Don't use floating point for loop indices. If you must use floating point, use double
unless you're certain that float provides enough precision and you have a compelling
performance need (space or time).
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ForStatement/ForInit//VariableId[pmd-java:typeIs('float')]</value>
         </property>
      </properties>
      <example>

public class Count {
  public static void main(String[] args) {
    final int START = 2000000000;
    int count = 0;
    for (float f = START; f &lt; START + 50; f++)
      count++;
      //Prints 0 because (float) START == (float) (START + 50).
      System.out.println(count);
      //The termination test misbehaves due to floating point granularity.
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.ConstructorCallsOverridableMethodRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod"
         language="java"
         message="Overridable {0} called during object construction{1}"
         name="ConstructorCallsOverridableMethod"
         since="1.04">
      <description>
Reports calls to overridable methods on `this` during object initialization. These
are invoked on an incompletely constructed object and can be difficult to debug if overridden.
This is because the subclass usually assumes that the superclass is completely initialized
in all methods. If that is not the case, bugs can appear in the constructor, for instance,
some fields that are still null may cause a NullPointerException or be stored somewhere
else to blow up later.

To avoid this problem, only use methods that are static, private, or final in constructors.
Note that those methods also must not call overridable methods transitively to be safe.
        </description>
      <priority>1</priority>
      <example>

public class SeniorClass {
  public SeniorClass(){
      toString(); //may throw NullPointerException if overridden
  }
  public String toString(){
    return "IAmSeniorClass";
  }
}
public class JuniorClass extends SeniorClass {
  private String name;
  public JuniorClass(){
    super(); //Automatic call leads to NullPointerException
    name = "JuniorClass";
  }
  public String toString(){
    return name.toUpperCase();
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.JUnitStaticSuiteRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#junitstaticsuite"
         language="java"
         message="You have a suite() method that is not both public and static, so JUnit won't call it to get your TestSuite.  Is that what you wanted to do?"
         name="JUnitStaticSuite"
         since="1.0">
      <description>
The suite() method in a JUnit test needs to be both public and static.
        </description>
      <priority>3</priority>
      <example>

import junit.framework.*;

public class Foo extends TestCase {
    public void suite() {}         // oops, should be static
    private static void suite() {} // oops, should be public
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#localinterfacesessionnamingconvention"
         language="java"
         message="The Local Interface of a Session EJB should be suffixed by 'Local'"
         name="LocalInterfaceSessionNamingConvention"
         since="4.0">
      <description>
The Local Interface of a Session EJB should be suffixed by 'Local'.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
[
    pmd-java:typeIs('javax.ejb.EJBLocalObject')
    and not(ends-with(@SimpleName, 'Local'))
]</value>
         </property>
      </properties>
      <example>

public interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name

public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UselessParenthesesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#uselessparentheses"
         language="java"
         message="Useless parentheses."
         name="UselessParentheses"
         since="5.0">
      <description>
            Parenthesized expressions are used to override the default operator precedence
            rules. Parentheses whose removal would not change the relative nesting of operators
            are unnecessary, because they don't change the semantics of the enclosing expression.

            Some parentheses that strictly speaking are unnecessary, may still be considered useful
            for readability. This rule allows to ignore violations on two kinds of unnecessary parentheses:
            - "Clarifying" parentheses, which separate operators of difference precedence. While
            unnecessary, they make precedence rules explicit, which may be useful for rarely used
            operators. For example:
            ```java
                (a + b) &amp; c // is equivalent to `a + b &amp; c`, but probably clearer
            ```
            Unset the property `ignoreClarifying` to report them.

            - "Balancing" parentheses, which are unnecessary but visually balance out another pair
            of parentheses around an equality operator. For example, those two expressions are equivalent:
            ```java
                (a == null) != (b == null)
                a == null != (b == null)
            ```
            The parentheses on the right are required, and the parentheses on the left are
            just more visually pleasing. Unset the property `ignoreBalancing` to report them.

        </description>
      <priority>4</priority>
      <example>

public class Foo {
    {
        int n = 0;
        n = (n);         // here
        n = (n * 2) * 3; // and here
        n = n * (2 * 3); // and here
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#usecorrectexceptionlogging"
         language="java"
         message="Use the correct logging statement for logging exceptions"
         name="UseCorrectExceptionLogging"
         since="3.2">
      <description>
To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.

This rule only applies to [Apache Commons Logging](https://commons.apache.org/proper/commons-logging/).
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchClause/Block//MethodCall
    [pmd-java:matchesSig('org.apache.commons.logging.Log#_(java.lang.Object)')]
    [ArgumentList[not(MethodCall)]//VariableAccess/@Name = ancestor::CatchClause/CatchParameter/@Name]</value>
         </property>
      </properties>
      <example>

public class Main {
    private static final Log _LOG = LogFactory.getLog( Main.class );
    void bar() {
        try {
        } catch( Exception e ) {
            _LOG.error( e ); //Wrong!
        } catch( OtherException oe ) {
            _LOG.error( oe.getMessage(), oe ); //Correct
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidassertasidentifier"
         language="java"
         maximumLanguageVersion="1.3"
         message="Avoid using assert as an identifier; it became a reserved word in JDK 1.4"
         name="AvoidAssertAsIdentifier"
         since="3.4">
      <description>
Use of the term `assert` will conflict with newer versions of Java since it is a reserved word.

Since Java 1.4, the token `assert` became a reserved word and using it as an identifier will
result in a compilation failure for Java 1.4 and later. This rule is therefore only useful
for old Java code before Java 1.4. It can be used to identify problematic code prior to a Java update.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//VariableId[@Name='assert']</value>
         </property>
      </properties>
      <example>

public class A {
    public class Foo {
        String assert = "foo";
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#controlstatementbraces"
         language="java"
         message="This statement should have braces"
         name="ControlStatementBraces"
         since="6.2.0">
      <description>
            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'
            statements and loop statements, even if they are optional. This usually makes the code clearer, and
            helps prepare the future when you need to add another statement. That said, this rule lets you control
            which statements are required to have braces via properties.

            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,
            and IfElseStmtMustUseBraces.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//WhileStatement[$checkWhileStmt and not(Block) and not($allowEmptyLoop and EmptyStatement)]
                |
                //ForStatement[$checkForStmt and not(Block) and not($allowEmptyLoop and EmptyStatement)]
                |
                //ForeachStatement[$checkForStmt and not(Block) and not($allowEmptyLoop and EmptyStatement)]
                |
                //DoStatement[$checkDoWhileStmt and not(Block) and not($allowEmptyLoop and EmptyStatement)]
                |
                (: The violation is reported on the sub statement -- not the if statement :)
                //IfStatement[$checkIfElseStmt]
                    /*[position() &gt; 1 and not(self::Block or self::IfStatement)]
                      [ $checkSingleIfStmt
                            (: Inside this (...) is the definition of a "single if statement" :)
                            or not(parent::*/@Else = false() (: No else stmt :)
                                   (: Not the last branch of an 'if ... else if' chain :)
                                   and not(parent::IfStatement[parent::IfStatement]))]

                |
                (: Reports case labels if one of their subordinate statements is not braced :)
                //SwitchFallthroughBranch[$checkCaseStmt]
                             [count(*) &gt; 1 and (count(*) &gt; 2 or not(child::*[2]/self::Block))]</value>
         </property>
         <property description="Require that 'if ... else' statements use braces"
                   name="checkIfElseStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'if' statements with a single branch use braces"
                   name="checkSingleIfStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'while' loops use braces"
                   name="checkWhileStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'for' loops should use braces"
                   name="checkForStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that 'do ... while' loops use braces"
                   name="checkDoWhileStmt"
                   type="Boolean">
            <value>true</value>
         </property>
         <property description="Require that cases of a switch have braces"
                   name="checkCaseStmt"
                   type="Boolean">
            <value>false</value>
         </property>
         <property description="Allow loops with an empty statement, e.g. 'while(true);'"
                   name="allowEmptyLoop"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
      <example>
            
while (true)    // not recommended
  x++;

while (true) {  // preferred approach
  x++;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.AvoidBranchingStatementAsLastInLoopRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop"
         language="java"
         message="Avoid using a branching statement as the last in a loop."
         name="AvoidBranchingStatementAsLastInLoop"
         since="5.0">
      <description>
Using a branching statement as the last part of a loop may be a bug, and/or is confusing.
Ensure that the usage is not a bug, or consider using another approach.
        </description>
      <priority>2</priority>
      <example>

// unusual use of branching statement in a loop
for (int i = 0; i &lt; 10; i++) {
    if (i*i &lt;= 25) {
        continue;
    }
    break;
}

// this makes more sense...
for (int i = 0; i &lt; 10; i++) {
    if (i*i &gt; 25) {
        break;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#instantiationtogetclass"
         language="java"
         message="Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
         name="InstantiationToGetClass"
         since="2.0">
      <description>
Avoid instantiating an object just to call getClass() on it; use the .class public member instead.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall
 [@MethodName='getClass']
 [ConstructorCall]</value>
         </property>
      </properties>
      <example>

// replace this
Class c = new String().getClass();

// with this:
Class c = String.class;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#finalizeonlycallssuperfinalize"
         language="java"
         message="Finalize should do something besides just calling super.finalize()"
         name="FinalizeOnlyCallsSuperFinalize"
         since="1.5">
      <description>
If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name='finalize'][@Arity = 0]
   [Block[@Size=1]/ExpressionStatement/MethodCall[@MethodName = "finalize"][SuperExpression]]</value>
         </property>
      </properties>
      <example>

protected void finalize() {
    super.finalize();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#properlogger"
         language="java"
         message="Logger should be defined private static final and have the correct class"
         name="ProperLogger"
         since="3.3">
      <description>
A logger should normally be defined private static final and be associated with the correct class.
`private final Log log;` is also allowed for rare cases where loggers need to be passed around,
with the restriction that the logger needs to be passed into the constructor.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration
    [ClassType[pmd-java:typeIs($loggerClass)]]
    [
        (: check modifiers :)
        (not(pmd-java:modifiers() = 'private') or not(pmd-java:modifiers() = 'final'))
        (: check logger name :)
        or (pmd-java:modifiers() = 'static' and VariableDeclarator/VariableId/@Name != $staticLoggerName)
        or (not(pmd-java:modifiers() = 'static') and VariableDeclarator/VariableId/@Name != $loggerName)
        (: check logger argument type matches class or enum name :)
        or .//ArgumentList/ClassLiteral/ClassType/@SimpleName != ancestor::ClassDeclaration/@SimpleName
        or .//ArgumentList/ClassLiteral/ClassType/@SimpleName != ancestor::EnumDeclaration/@SimpleName

        (: special case - final logger initialized inside constructor :)
        or (VariableDeclarator/@Initializer = false()
            and not(pmd-java:modifiers() = 'static')
            and not(ancestor::ClassBody/ConstructorDeclaration
                //AssignmentExpression[@Operator = '=']
                    [FieldAccess[1]/@Name = $loggerName or VariableAccess[1]/@Name = $loggerName]
                    [*[2][@Name = ancestor::ConstructorDeclaration//FormalParameter/VariableId/@Name]])
        )
    ]</value>
         </property>
         <property description="Name of the static Logger variable"
                   name="staticLoggerName"
                   type="String">
            <value>LOG</value>
         </property>
         <property description="Name of the Logger instance variable"
                   name="loggerName"
                   type="String">
            <value>log</value>
         </property>
         <property description="Class name of the logger"
                   name="loggerClass"
                   type="String">
            <value>org.apache.commons.logging.Log</value>
         </property>
      </properties>
      <example>
 
public class Foo {

    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way

    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.TestClassWithoutTestCasesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#testclasswithouttestcases"
         language="java"
         message="The class ''{0}'' might be a test class, but it contains no test cases."
         name="TestClassWithoutTestCases"
         since="3.0">
      <description>
Test classes typically end with the suffix "Test", "Tests" or "TestCase". Having a non-test class with that name
is not a good practice, since most people will assume it is a test case. Test classes have test methods
named "testXXX" (JUnit3) or use annotations (e.g. `@Test`).

The suffix can be configured using the property `testClassPattern`. To disable the detection of possible test classes
by name, set this property to an empty string.
        </description>
      <priority>3</priority>
      <example>

//Consider changing the name of the class if it is not a test
//Consider adding test methods if it is a test
public class CarTest {
   public static void main(String[] args) {
    // do something
   }
   // code
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningCatchVariablesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidreassigningcatchvariables"
         language="java"
         message="Avoid reassigning caught exception ''{0}''"
         name="AvoidReassigningCatchVariables"
         since="6.27.0">
      <description>
Reassigning exception variables caught in a catch statement should be avoided because of:

1) If it is needed, multi catch can be easily added and code will still compile.

2) Following the principle of least surprise we want to make sure that a variable caught in a catch statement
is always the one thrown in a try block.
        </description>
      <priority>3</priority>
      <example>
public class Foo {
    public void foo() {
        try {
            // do something
        } catch (Exception e) {
            e = new NullPointerException(); // not recommended
        }

        try {
            // do something
        } catch (MyException | ServerException e) {
            e = new RuntimeException(); // won't compile
        }
    }
}
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.LawOfDemeterRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#lawofdemeter"
         language="java"
         message="Potential violation of the law of Demeter ({0})"
         name="LawOfDemeter"
         since="5.0">
      <description>
The law of Demeter is a simple rule that says "only talk to friends". It forbids
fetching data from "too far away", for some definition of distance, in order to
reduce coupling between classes or objects of different levels of abstraction.

The rule uses a notion of "degree", that quantifies how "far" an object is.
Expressions with too high degree can only be used in certain ways. The degree of
an expression is defined inductively:
- The degree of `this` is 0
- The degree of a method parameter is 1
- The degree of a new object created in a method is 1
- The degree of a static variable is 1
- The degree of a field access expression like `expr.field` is the degree of `expr` plus 1
- The degree of a "getter expression" like `expr.getFoo()` is the degree of `expr` plus 1
- The degree of a "transformation expression" like `expr.withFoo("")` is the degree of `expr`
- The degree of a variable is the maximum degree of all the assignments that reach it

Intuitively, the more you call getters, the more the degree increases. Eventually
the degree reaches the report threshold (property `trustRadius`) and the expression
is reported. The details of the calculation are more involved and make room for common
patterns, like usage of collections (objects that are in a list or array have the
same degree as their container), the builder pattern, and getters that do not appear
to break a boundary of abstraction.

Be aware that this rule is prone to many false-positives and low-priority warnings.
You can increase the `trustRadius` property to reduce them drastically. The default
`trustRadius` of 1 corresponds to the original law of Demeter (you're only allowed
one getter call on untrusted values). Given some `trustRadius` value:
- expressions of degree lower or equal to `trustRadius` are not reported
- expressions of degree exactly `trustRadius + 1` are reported, unless they are only returned
from the current method, or passed as argument to another method. Without this exception it
would not be possible to extract any information from e.g. method parameters.
- values of degree strictly greater than `trustRadius + 1` are not reported. The
intuition is that to obtain a value of degree `n &gt; 1` then you must use an expression
of degree `n - 1`, so if you have `n &gt; trustRadius + 1`, there you're using some value
of degree `trustRadius + 1` that will be reported.

See also the references:

*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;
*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38占쎈쐻占쎈짗占쎌굲48, 1989.;
*   &lt;http://www.ccs.neu.edu/home/lieber/LoD.html&gt;
*   &lt;http://en.wikipedia.org/wiki/Law_of_Demeter&gt;
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    /**
     * This example will result in one violation.
     */
    public void example(Bar b) { // b has degree 1
        // `b.getC()` has degree 2, it's breaking a boundary of abstraction and so is reported.
        b.getC().doIt();
        // To respect the law of Demeter, Bar should encapsulate its
        // C member more properly, eg by exposing a method like this:
        b.callDoItOnC();

        // a constructor call, not a method call.
        D d = new D();
        // this method call is ok, because we have create the new
        // instance of D locally.
        d.doSomethingElse();
    }
}
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitUseExpectedRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junituseexpected"
         language="java"
         message="In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions"
         name="JUnitUseExpected"
         since="4.0">
      <description>
In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.
        </description>
      <priority>3</priority>
      <example>

public class MyTest {
    @Test
    public void testBad() {
        try {
            doSomething();
            fail("should have thrown an exception");
        } catch (Exception e) {
        }
    }

    @Test(expected=Exception.class)
    public void testGood() {
        doSomething();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.SuspiciousOctalEscapeRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#suspiciousoctalescape"
         language="java"
         message="Suspicious decimal characters following octal escape in string literal: {0}"
         name="SuspiciousOctalEscape"
         since="1.5">
      <description>
A suspicious octal escape sequence was found inside a String literal.
The Java language specification (section 3.10.6) says an octal
escape sequence inside a literal String shall consist of a backslash
followed by:

    OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit

Any octal escape sequence followed by non-octal digits can be confusing,
e.g. "\038" is interpreted as the octal escape sequence "\03" followed by
the literal character "8".
        </description>
      <priority>3</priority>
      <example>

public void foo() {
  // interpreted as octal 12, followed by character '8'
  System.out.println("suspicious: \128");
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#callsuperinconstructor"
         language="java"
         message="It is a good practice to call super() in a constructor"
         name="CallSuperInConstructor"
         since="3.0">
      <description>
It is a good practice to call super() in a constructor. If super() is not called but
another constructor (such as an overloaded constructor) is called, this rule will not report it.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[ExtendsList/*]
  /ClassBody
  /ConstructorDeclaration[ not(Block/ExplicitConstructorInvocation) ]</value>
         </property>
      </properties>
      <example>

public class Foo extends Bar{
  public Foo() {
   // call the constructor of Bar
   super();
  }
 public Foo(int code) {
  // do something with code
   this();
   // no problem with this
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally"
         language="java"
         message="A throw statement in a finally block makes the control flow hard to understand."
         name="DoNotThrowExceptionInFinally"
         since="4.2">
      <description>
Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions
or code defects.
Note: This is a PMD implementation of the Lint4j rule "A throw in a finally block"
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//FinallyClause[descendant::ThrowStatement]</value>
         </property>
      </properties>
      <example>

public class Foo {
    public void bar() {
        try {
            // Here do some stuff
        } catch( Exception e) {
            // Handling the issue
        } finally {
            // is this really a good idea ?
            throw new Exception();
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#localhomenamingconvention"
         language="java"
         message="The Local Home interface of a Session EJB should be suffixed by 'LocalHome'"
         name="LocalHomeNamingConvention"
         since="4.0">
      <description>
The Local Home interface of a Session EJB should be suffixed by 'LocalHome'.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
[
    pmd-java:typeIs('javax.ejb.EJBLocalHome')
    and not(ends-with(@SimpleName, 'LocalHome'))
]</value>
         </property>
      </properties>
      <example>

public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name

public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#systemprintln"
         language="java"
         message="Usage of System.out/err"
         name="SystemPrintln"
         since="2.1">
      <description>
References to System.(out|err).print are usually intended for debugging purposes and can remain in
the codebase even in production code. By using a logger one can enable/disable this behaviour at
will (and by priority) and avoid clogging the Standard out log.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[ starts-with(@MethodName, 'print') ]
  /FieldAccess[ @Name = ('err', 'out') ]
  /TypeExpression[ pmd-java:typeIsExactly('java.lang.System') ]</value>
         </property>
      </properties>
      <example>
 
class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        log.fine("Entering test");
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SignatureDeclareThrowsExceptionRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#signaturedeclarethrowsexception"
         language="java"
         message="A method/constructor should not explicitly throw java.lang.Exception"
         name="SignatureDeclareThrowsException"
         since="1.2">
      <description>
A method/constructor shouldn't explicitly throw the generic java.lang.Exception, since it
is unclear which exceptions that can be thrown from the methods. It might be
difficult to document and understand such vague interfaces. Use either a class
derived from RuntimeException or a checked exception.
        </description>
      <priority>3</priority>
      <example>

public void foo() throws Exception {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#avoidcatchinggenericexception"
         language="java"
         message="Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block"
         name="AvoidCatchingGenericException"
         since="4.2.6">
      <description>
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchParameter//ClassType[
    pmd-java:typeIsExactly('java.lang.NullPointerException') or
    pmd-java:typeIsExactly('java.lang.Exception') or
    pmd-java:typeIsExactly('java.lang.RuntimeException')]</value>
         </property>
      </properties>
      <example>

package com.igate.primitive;

public class PrimitiveType {

    public void downCastPrimitiveType() {
        try {
            System.out.println(" i [" + i + "]");
        } catch(Exception e) {
            e.printStackTrace();
        } catch(RuntimeException e) {
            e.printStackTrace();
        } catch(NullPointerException e) {
            e.printStackTrace();
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#returnemptycollectionratherthannull"
         language="java"
         message="Return an empty collection rather than 'null'."
         name="ReturnEmptyCollectionRatherThanNull"
         since="6.37.0">
      <description>
For any method that returns an collection (such as an array, Collection or Map), it is better to return
an empty one rather than a null reference. This removes the need for null checking all results and avoids
inadvertent NullPointerExceptions.

See Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ReturnStatement/NullLiteral
[ancestor::MethodDeclaration[1]
    [ArrayType
     or ClassType[pmd-java:typeIs('java.util.Collection')
        or pmd-java:typeIs('java.util.Map')]]
]
[not(./ancestor::LambdaExpression)]</value>
         </property>
      </properties>
      <example>

public class Example {
    // Not a good idea...
    public int[] badBehavior() {
        // ...
        return null;
    }

    // Good behavior
    public String[] bonnePratique() {
        //...
        return new String[0];
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.BrokenNullCheckRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#brokennullcheck"
         language="java"
         message="This expression will throw a NullPointerException"
         name="BrokenNullCheck"
         since="3.8">
      <description>
The null check is broken since it will throw a NullPointerException itself.
It is likely that you used || instead of &amp;&amp; or vice versa.
        </description>
      <priority>2</priority>
      <example>

public String bar(String string) {
  // should be &amp;&amp;
    if (string!=null || !string.equals(""))
        return string;
  // should be ||
    if (string==null &amp;&amp; string.equals(""))
        return string;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryCastRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessarycast"
         language="java"
         message="Unnecessary cast ({0})"
         minimumLanguageVersion="1.5"
         name="UnnecessaryCast"
         since="6.24.0">
      <description>
Detects casts which could be removed as the operand of the cast is already suitable
for the context type. For instance, in the following:
```
Object context = (Comparable) "o";
```
The cast is unnecessary. This is because `String` already is a subtype of both
`Comparable` and `Object`.

This will also flag casts that can be avoided because of the autoboxing feature of Java 5.
```
Integer integer = (Integer) 1;
```
The literal would be autoboxed to `Integer` anyway.
            </description>
      <priority>3</priority>
      <example>

import java.util.function.Function;
class SomeClass {
   static {
      Object o; long l; int i; Integer boxedInt;

      // reference conversions

      o = (Object) new SomeClass();      // unnecessary
      o = (SomeClass) o;                 // necessary (narrowing cast)
      o = (Comparable&lt;String&gt;) "string"; // unnecessary

      // primitive conversions

      l = (long) 2;   // unnecessary
      l = (long) 2.0; // necessary (narrowing cast)
      l = (byte) i;   // necessary (narrowing cast)

      // boxing/unboxing casts (since java 5)

      o = (Integer) 3;    // unnecessary (autoboxing would apply)
      o = (long) 3;       // necessary (would be boxed to Long)
      l = (int) boxedInt; // necessary (cannot cast Integer to long)

      // casts that give a target type to a lambda/ method ref are necessary

      o = (Function&lt;Integer, String&gt;) Integer::toString; // necessary (no target type)
   }
}

        </example>
      <example>

import java.util.*;
class SomeClass {
   static {
       /* Casts involving access to collections were common before Java 5, because collections
        * were not generic. This rule may hence be useful when converting from using a raw
        * type like `List` to a parameterized type like `List&lt;String&gt;`.
        */
       List&lt;String&gt; stringList = Arrays.asList("a", "b");
       String element = (String) stringList.get(0); // this cast is unnecessary
   }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentToNonFinalStaticRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#assignmenttononfinalstatic"
         language="java"
         message="Possible unsafe assignment to non-final static field ''{0}'' in a constructor."
         name="AssignmentToNonFinalStatic"
         since="2.2">
      <description>
Identifies a possible unsafe usage of a static field.
        </description>
      <priority>3</priority>
      <example>

public class StaticField {
   static int x;
   public FinalFields(int y) {
    x = y; // unsafe
   }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.LiteralsFirstInComparisonsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#literalsfirstincomparisons"
         language="java"
         message="Position literals first in String comparisons"
         name="LiteralsFirstInComparisons"
         since="6.24.0">
      <description>
            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions
            can be avoided, they will just return false. Note that switching literal positions for compareTo and
            compareToIgnoreCase may change the result, see examples.
        </description>
      <priority>3</priority>
      <example>
            
class Foo {
    boolean bar(String x) {
        return x.equals("2"); // should be "2".equals(x)
    }
    boolean bar(String x) {
        return x.equalsIgnoreCase("2"); // should be "2".equalsIgnoreCase(x)
    }
    boolean bar(String x) {
        return (x.compareTo("bar") &gt; 0); // should be: "bar".compareTo(x) &lt; 0
    }
    boolean bar(String x) {
        return (x.compareToIgnoreCase("bar") &gt; 0); // should be: "bar".compareToIgnoreCase(x) &lt; 0
    }
    boolean bar(String x) {
        return x.contentEquals("bar"); // should be "bar".contentEquals(x)
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#replacevectorwithlist"
         language="java"
         message="Consider replacing this Vector with the newer java.util.List"
         name="ReplaceVectorWithList"
         since="3.4">
      <description>
Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassType[pmd-java:typeIs('java.util.Vector')]</value>
         </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        Vector v = new Vector();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ExcessiveImportsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#excessiveimports"
         language="java"
         message="A high number of imports can indicate a high degree of coupling within an object."
         name="ExcessiveImports"
         since="1.04">
      <description>
A high number of imports can indicate a high degree of coupling within an object. This rule
counts the number of unique imports and reports a violation if the count is above the
user-specified threshold.
        </description>
      <priority>3</priority>
      <example>

import blah.blah.Baz;
import blah.blah.Bif;
// 28 others from the same package elided
public class Foo {
    public void doWork() {}
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#uselessqualifiedthis"
         language="java"
         message="Useless qualified this usage in the same class."
         name="UselessQualifiedThis"
         since="5.4.0">
      <description>
            Reports qualified this usages in the same class.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ThisExpression/ClassType
[ ancestor::*[pmd-java:nodeIs('TypeDeclaration')][1]/@SimpleName = ./@SimpleName ]</value>
         </property>
      </properties>
      <example>

public class Foo {
    final Foo otherFoo = Foo.this;  // use "this" directly

    public void doSomething() {
         final Foo anotherFoo = Foo.this;  // use "this" directly
    }

    private ActionListener returnListener() {
        return new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doSomethingWithQualifiedThis(Foo.this);  // This is fine
            }
        };
    }

    private class Foo3 {
        final Foo myFoo = Foo.this;  // This is fine
    }

    private class Foo2 {
        final Foo2 myFoo2 = Foo2.this;  // Use "this" direclty
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause"
         language="java"
         message="An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
         name="AvoidInstanceofChecksInCatchClause"
         since="3.0">
      <description>
Each caught exception type should be handled in its own catch clause.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchParameter
    /following-sibling::Block//InfixExpression[@Operator = 'instanceof']
        /VariableAccess[@Name = ./ancestor::Block/preceding-sibling::CatchParameter/@Name]</value>
         </property>
      </properties>
      <example>

try { // Avoid this
    // do something
} catch (Exception ee) {
    if (ee instanceof IOException) {
        cleanup();
    }
}

try {  // Prefer this:
    // do something
} catch (IOException ee) {
    cleanup();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#callsuperlast"
         language="java"
         message="super should be called at the end of the method"
         name="CallSuperLast"
         since="4.2.5">
      <description>
Super should be called at the end of the method
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
    [
      pmd-java:typeIs('android.app.Activity') or
      pmd-java:typeIs('android.app.Application') or
      pmd-java:typeIs('android.app.Service')
    ]
    //MethodDeclaration
    [
      @Name=('finish', 'onDestroy', 'onPause', 'onSaveInstanceState', 'onStop', 'onTerminate')
    ]
    [not(Block/*[last()]/MethodCall[SuperExpression][@MethodName = ancestor::MethodDeclaration/@Name])]</value>
         </property>
      </properties>
      <example>

import android.app.Activity;

public class DummyActivity extends Activity {
    public void onPause() {
        foo();
        // missing call to super.onPause()
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.CommentDefaultAccessModifierRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier"
         language="java"
         message="Missing commented default access modifier on {0} ''{1}''"
         name="CommentDefaultAccessModifier"
         since="5.4.0">
      <description>
To avoid mistakes if we want that an Annotation, Class, Enum, Method, Constructor or Field have a default access modifier
we must add a comment at the beginning of its declaration.
By default, the comment must be `/* default */` or `/* package */`, if you want another, you have to provide a regular expression.

This rule ignores by default all cases that have a `@VisibleForTesting` annotation or any JUnit5/TestNG annotation. Use the
property "ignoredAnnotations" to customize the recognized annotations.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    final String stringValue = "some string";
    String getString() {
       return stringValue;
    }

    class NestedFoo {
    }
}

// should be
public class Foo {
    /* default */ final String stringValue = "some string";
    /* default */ String getString() {
       return stringValue;
    }

    /* default */ class NestedFoo {
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.PrematureDeclarationRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#prematuredeclaration"
         language="java"
         message="Declaration of ''{0}'' can be moved closer to its usages"
         name="PrematureDeclaration"
         since="5.0">
      <description>
Checks for variables that are defined before they might be used. A declaration is
deemed to be premature if there are some statements that may return or throw an
exception between the time the variable is declared and the time it is first read.

Some variables cannot be declared close to their first usage because of side-effects
occurring before they're first used. We try to avoid reporting those by considering
most method and constructor invocations to be impure. See the second example.

Note that this rule is meant to improve code readability but is not an optimization.
A smart JIT will not care whether the variable is declared prematurely or not, as it
can reorder code.
        </description>
      <priority>3</priority>
      <example>

public int getLength(String[] strings) {

    int length = 0; // could be moved closer to the loop

    if (strings == null || strings.length == 0) return 0;

    for (String str : strings) {
        length += str.length();
    }

    return length;
}

        </example>
      <example>

public int getLength(String[] strings) {

    int startTime = System.nanoTime(); // cannot be moved because initializer is impure

    if (strings == null || strings.length == 0) {
        // some error logic
        throw new SomeException(...);
    }

    for (String str : strings) {
        length += str.length();
    }

    return System.nanoTime() - startTime;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#abstractclasswithoutanymethod"
         language="java"
         message="No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead."
         name="AbstractClassWithoutAnyMethod"
         since="4.2">
      <description>
If an abstract class does not provide any methods, it may be acting as a simple data container
that is not meant to be instantiated. In this case, it is probably better to use a private or
protected constructor in order to prevent instantiation than make the class misleadingly abstract.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
    [@Abstract = true() and @Interface = false()]
    [ClassBody[not(ConstructorDeclaration | MethodDeclaration)]]
    [not(pmd-java:hasAnnotation('com.google.auto.value.AutoValue')
         or pmd-java:hasAnnotation('lombok.AllArgsConstructor')
         or pmd-java:hasAnnotation('lombok.NoArgsConstructor')
         or pmd-java:hasAnnotation('lombok.RequiredArgsConstructor'))
    ]</value>
         </property>
      </properties>
      <example>

public abstract class Example {
    String field;
    int otherField;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#unusednullcheckinequals"
         language="java"
         message="Invoke equals() on the object you''ve already ensured is not null"
         name="UnusedNullCheckInEquals"
         since="3.5">
      <description>
After checking an object reference for null, you should invoke equals() on that object rather than passing
it to another object's equals() method.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression[@Operator = '&amp;&amp;']
  /MethodCall[pmd-java:matchesSig("java.lang.Object#equals(java.lang.Object)")]
             [not(StringLiteral)]
             [not(VariableAccess[@CompileTimeConstant = true()])]
             [ArgumentList/VariableAccess/@Name = ..//InfixExpression[@Operator = '!='][NullLiteral]/VariableAccess/@Name]</value>
         </property>
      </properties>
      <example>

public class Test {

    public String method1() { return "ok";}
    public String method2() { return null;}

    public void method(String a) {
        String b;
        // I don't know it method1() can be "null"
        // but I know "a" is not null..
        // I'd better write a.equals(method1())

        if (a!=null &amp;&amp; method1().equals(a)) { // will trigger the rule
            //whatever
        }

        if (method1().equals(a) &amp;&amp; a != null) { // won't trigger the rule
            //whatever
        }

        if (a!=null &amp;&amp; method1().equals(b)) { // won't trigger the rule
            //whatever
        }

        if (a!=null &amp;&amp; "LITERAL".equals(a)) { // won't trigger the rule
            //whatever
        }

        if (a!=null &amp;&amp; !a.equals("go")) { // won't trigger the rule
            a=method2();
            if (method1().equals(a)) {
                //whatever
            }
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.MethodArgumentCouldBeFinalRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal"
         language="java"
         message="Parameter ''{0}'' is not assigned and could be declared final"
         name="MethodArgumentCouldBeFinal"
         since="2.2">
      <description>
A method argument that is never re-assigned within the method can be declared final.
        </description>
      <priority>3</priority>
      <example>

public void foo1 (String param) {       // do stuff with param never assigning it

}

public void foo2 (final String param) { // better, do stuff with param never assigning it

}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_documentation.html#uncommentedemptymethodbody"
         language="java"
         message="Document empty method body"
         name="UncommentedEmptyMethodBody"
         since="3.4">
      <description>
Uncommented Empty Method Body finds instances where a method body does not contain
statements, but there is no comment. By explicitly commenting empty method bodies
it is easier to distinguish between intentional (commented) and unintentional
empty methods.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration/Block[count(*) = 0 and @containsComment = false()]</value>
         </property>
      </properties>
      <example>

public void doSomething() {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.IdenticalCatchBranchesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#identicalcatchbranches"
         language="java"
         message="''catch'' branch identical to ''{0}'' branch"
         minimumLanguageVersion="1.7"
         name="IdenticalCatchBranches"
         since="6.4.0">
      <description>
            Identical `catch` branches use up vertical space and increase the complexity of code without
            adding functionality. It's better style to collapse identical branches into a single multi-catch
            branch.
        </description>
      <priority>3</priority>
      <example>
            
try {
    // do something
} catch (IllegalArgumentException e) {
    throw e;
} catch (IllegalStateException e) { // Can be collapsed into the previous block
    throw e;
}

try {
    // do something
} catch (IllegalArgumentException | IllegalStateException e) { // This is better
    throw e;
}
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#useconcurrenthashmap"
         language="java"
         message="If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation"
         minimumLanguageVersion="1.5"
         name="UseConcurrentHashMap"
         since="4.2.6">
      <description>
Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can
perform efficient map reads without blocking other threads.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//VariableDeclarator[VariableId[pmd-java:typeIsExactly('java.util.Map')] and *[2][self::ConstructorCall and not(pmd-java:typeIs('java.util.concurrent.ConcurrentHashMap'))]]</value>
         </property>
      </properties>
      <example>

public class ConcurrentApp {
  public void getMyInstance() {
    Map map1 = new HashMap();           // fine for single-threaded access
    Map map2 = new ConcurrentHashMap(); // preferred for use with multiple threads

    // the following case will be ignored by this rule
    Map map3 = someModule.methodThatReturnMap(); // might be OK, if the returned map is already thread-safe
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#classcastexceptionwithtoarray"
         language="java"
         message="This usage of the Collection.toArray() method will throw a ClassCastException."
         name="ClassCastExceptionWithToArray"
         since="3.4">
      <description>
When deriving an array of a specific class from your Collection, one should provide an array of
the same class as the parameter of the `toArray()` method. Doing otherwise will result
in a `ClassCastException`.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CastExpression[ArrayType/ClassType[not(pmd-java:typeIsExactly('java.lang.Object'))]]
    /MethodCall[pmd-java:matchesSig("java.util.Collection#toArray()")]</value>
         </property>
      </properties>
      <example>

Collection c = new ArrayList();
Integer obj = new Integer(1);
c.add(obj);

    // this would trigger the rule (and throw a ClassCastException if executed)
Integer[] a = (Integer [])c.toArray();

   // this is fine and will not trigger the rule
Integer[] b = (Integer [])c.toArray(new Integer[0]);

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.OnlyOneReturnRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#onlyonereturn"
         language="java"
         message="A method should have only one exit point, and that should be the last statement in the method"
         name="OnlyOneReturn"
         since="1.0">
      <description>
A method should have only one exit point, and that should be the last statement in the method.
        </description>
      <priority>3</priority>
      <example>

public class OneReturnOnly1 {
  public String foo(int x) {
    if (x &gt; 0) {
      return "hey";   // first exit
    }
    return "hi";    // second exit
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.UnnecessaryCaseChangeRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#unnecessarycasechange"
         language="java"
         message="Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals()."
         name="UnnecessaryCaseChange"
         since="3.3">
      <description>
Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()
        </description>
      <priority>3</priority>
      <example>

boolean answer1 = buz.toUpperCase().equals("BAZ");              // should be buz.equalsIgnoreCase("BAZ")

boolean answer2 = buz.toUpperCase().equalsIgnoreCase("BAZ");    // another unnecessary toUpperCase()

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract"
         language="java"
         message="An empty method in an abstract class should be abstract instead"
         name="EmptyMethodInAbstractClassShouldBeAbstract"
         since="4.1">
      <description>
Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate
usage by developers who should be implementing their own versions in the concrete subclasses.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[@RegularClass = true() and pmd-java:modifiers() = "abstract"]
    /ClassBody
    /MethodDeclaration
    [Block[
      let $size := count(*[not(self::EmptyStatement)])
      return $size = 0
             or $size = 1 and ReturnStatement[ NullLiteral or NumericLiteral[@ValueAsInt = 0] or StringLiteral[@Empty = true()]]
    ]]</value>
         </property>
      </properties>
      <example>

public abstract class ShouldBeAbstract {
    public Object couldBeAbstract() {
        // Should be abstract method ?
        return null;
    }

    public void couldBeAbstract() {
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#immutablefield"
         language="java"
         message="Field ''{0}'' may be declared final"
         name="ImmutableField"
         since="2.0">
      <description>
Reports non-final fields whose value never changes once object initialization ends,
and hence may be marked final.

Note that this rule does not enforce that the field value be deeply immutable itself.
An object can still have mutable state, even if all its member fields are declared final.
This is referred to as shallow immutability. For more information on mutability,
see *Effective Java, 3rd Edition, Item 17: Minimize mutability*.

Limitations: We can only check private fields for now.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
  private int x; // could be final
  public Foo() {
      x = 7;
  }
  public void foo() {
     int a = x + 2;
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.security.InsecureCryptoIvRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_security.html#insecurecryptoiv"
         language="java"
         message="Do not use hard coded initialization vector in crypto operations"
         name="InsecureCryptoIv"
         since="6.3.0">
      <description>
Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    void good() {
        SecureRandom random = new SecureRandom();
        byte iv[] = new byte[16];
        random.nextBytes(bytes);
    }

    void bad() {
        byte[] iv = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };
    }

    void alsoBad() {
        byte[] iv = "secret iv in here".getBytes();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#useequalstocomparestrings"
         language="java"
         message="Use equals() to compare strings instead of ''=='' or ''!=''"
         name="UseEqualsToCompareStrings"
         since="4.1">
      <description>
Using '==' or '!=' to compare strings is only reliable if the interned string (`String#intern()`)
is used on both sides.

Use the `equals()` method instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression[@Operator = ('==', '!=')]
                 [count(*[pmd-java:typeIsExactly('java.lang.String')]) = 2]</value>
         </property>
      </properties>
      <example>

public boolean test(String s) {
    if (s == "one") return true;        // unreliable
    if ("two".equals(s)) return true;   // better
    return false;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#useutilityclass"
         language="java"
         message="All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning."
         name="UseUtilityClass"
         since="0.3">
      <description>
For classes that only have static methods, consider making them utility classes.
Note that this doesn't apply to abstract classes, since their subclasses may
well include non-static methods.  Also, if you want this class to be a utility class,
remember to add a private constructor to prevent instantiation.
(Note, that this use was known before PMD 5.1.0 as UseSingleton).
        </description>
      <priority>3</priority>
      <example>

public class MaybeAUtility {
  public static void foo() {}
  public static void bar() {}
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#donotextendjavalangerror"
         language="java"
         message="Exceptions should not extend java.lang.Error"
         name="DoNotExtendJavaLangError"
         since="4.0">
      <description>
Errors are system exceptions. Do not extend them.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration/ExtendsList/ClassType[pmd-java:typeIs('java.lang.Error')]</value>
         </property>
      </properties>
      <example>

public class Foo extends Error { }

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_html_bestpractices.html#avoidinlinestyles"
         language="html"
         message="Avoid inline styles"
         name="AvoidInlineStyles"
         since="6.45.0">
      <description>
Don't mix content and style. Use separate CSS-files for the style and introduce classes.
This helps to reuse common styles.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//*[@style]</value>
         </property>
      </properties>
      <example>

&lt;div style="font-size: 12pt;"&gt;&lt;/div&gt;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#avoidthreadgroup"
         language="java"
         message="Avoid using java.lang.ThreadGroup; it is not thread safe"
         name="AvoidThreadGroup"
         since="3.6">
      <description>
Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment
it contains methods that are not thread-safe.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ConstructorCall/ClassType[pmd-java:typeIs('java.lang.ThreadGroup')]
| //MethodCall[@MethodName = 'getThreadGroup']</value>
         </property>
      </properties>
      <example>

public class Bar {
    void buz() {
        ThreadGroup tg = new ThreadGroup("My threadgroup");
        tg = new ThreadGroup(tg, "my thread group");
        tg = Thread.currentThread().getThreadGroup();
        tg = System.getSecurityManager().getThreadGroup();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.DetachedTestCaseRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#detachedtestcase"
         language="java"
         message="Probable detached JUnit test case."
         name="DetachedTestCase"
         since="6.13.0">
      <description>
The method appears to be a test case since it has public or default visibility,
non-static access, no arguments, no return value, has no annotations, but is a
member of a class that has one or more JUnit test cases. If it is a utility
method, it should likely have private visibility. If it is an ignored test, it
should be annotated with @Test and @Ignore.
        </description>
      <priority>3</priority>
      <example>

public class MyTest {
    @Test
    public void someTest() {
    }

    // violation: Not annotated
    public void someOtherTest () {
    }

}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.JUnitSpellingRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#junitspelling"
         language="java"
         message="You may have misspelled a JUnit framework method (setUp or tearDown)"
         name="JUnitSpelling"
         since="1.0">
      <description>
            In JUnit 3, the setUp method is used to set up all data entities required in running tests.
            The tearDown method is used to clean up all data entities required in running tests.
            You should not misspell method name if you want your test to set up and clean up everything correctly.
        </description>
      <priority>3</priority>
      <example>

import junit.framework.*;

public class Foo extends TestCase {
    public void setup() {}    // oops, should be setUp
    public void TearDown() {} // oops, should be tearDown
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidcatchingnpe"
         language="java"
         message="Avoid catching NullPointerException; consider removing the cause of the NPE."
         name="AvoidCatchingNPE"
         since="1.8">
      <description>
Code should never throw NullPointerExceptions under normal circumstances.  A catch block may hide the
original error, causing other, more subtle problems later on.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchClause/CatchParameter/ClassType[pmd-java:typeIsExactly('java.lang.NullPointerException')]</value>
         </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        try {
            // do something
        } catch (NullPointerException npe) {
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidcallingfinalize"
         language="java"
         message="Avoid calling finalize() explicitly"
         name="AvoidCallingFinalize"
         since="3.0">
      <description>
The method Object.finalize() is called by the garbage collector on an object when garbage collection determines
that there are no more references to the object. It should not be invoked by application logic.

Note that Oracle has declared Object.finalize() as deprecated since JDK 9.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[pmd-java:matchesSig("java.lang.Object#finalize()")]
    (: it's ok inside finalize :)
    [not(SuperExpression and ancestor::*[self::MethodDeclaration or self::Initializer][1][@Name = 'finalize'][@Arity = 0][VoidType])]</value>
         </property>
      </properties>
      <example>

void foo() {
    Bar b = new Bar();
    b.finalize();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#collapsibleifstatements"
         language="java"
         message="This if statement could be combined with its parent"
         name="CollapsibleIfStatements"
         since="3.1">
      <description>
Reports nested 'if' statements that can be merged together by joining their
conditions with a boolean `&amp;&amp;` operator in between.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//IfStatement[@Else = false()]/IfStatement[@Else = false()]
|
//IfStatement[@Else = false()]/Block[count(*) = 1]/IfStatement[@Else = false()]</value>
         </property>
      </properties>
      <example>

class Foo {

    void bar() {
        if (x) {            // original implementation
            if (y) {
                // do stuff
            }
        }
    }

    void bar() {
        if (x &amp;&amp; y) {        // clearer implementation
            // do stuff
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.ImplicitSwitchFallThroughRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#implicitswitchfallthrough"
         language="java"
         message="This switch case may be reached by fallthrough from the previous case"
         name="ImplicitSwitchFallThrough"
         since="3.0">
      <description>
Switch statements without break or return statements for each case option
may indicate problematic behaviour. Empty cases are ignored as these indicate
an intentional fall-through.

You can ignore a violation by commenting `// fallthrough` before the case label
which is reached by fallthrough, or with `@SuppressWarnings("fallthrough")`.

This rule has been renamed from "MissingBreakInSwitch" in PMD 6.37.0.
        </description>
      <priority>3</priority>
      <example>

public void bar(int status) {
    switch(status) {
      case CANCELLED:
        doCancelled();
        // break; hm, should this be commented out?
      case NEW:
        doNew();
        // is this really a fall-through?
        // what happens if you add another case after this one?
      case REMOVED:
        doRemoved();
        // fallthrough - this comment just clarifies that you want a fallthrough
      case OTHER: // empty case - this is interpreted as an intentional fall-through
      case ERROR:
        doErrorHandling();
        break;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidmessagedigestfield"
         language="java"
         message="You shouldn't declare field of MessageDigest type, because unsynchronized access could cause problems"
         name="AvoidMessageDigestField"
         since="6.18.0">
      <description>
            Declaring a MessageDigest instance as a field make this instance directly available to multiple threads.
            Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results
            if the access is not synchronized correctly.
            Just create a new instance and use it locally, where you need it.
            Creating a new instance is easier than synchronizing access to a shared instance.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration/ClassType[pmd-java:typeIs('java.security.MessageDigest')]</value>
         </property>
      </properties>
      <example>
            
import java.security.MessageDigest;
public class AvoidMessageDigestFieldExample {
    private final MessageDigest sharedMd;
    public AvoidMessageDigestFieldExample() throws Exception {
        sharedMd = MessageDigest.getInstance("SHA-256");
    }
    public byte[] calculateHashShared(byte[] data) {
        // sharing a MessageDigest like this without synchronizing access
        // might lead to wrong results
        sharedMd.reset();
        sharedMd.update(data);
        return sharedMd.digest();
    }

    // better
    public byte[] calculateHash(byte[] data) throws Exception {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(data);
        return md.digest();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.UselessOperationOnImmutableRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#uselessoperationonimmutable"
         language="java"
         message="An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself"
         name="UselessOperationOnImmutable"
         since="3.5">
      <description>
An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself
since the result of the operation is a new object. Therefore, ignoring the operation result is an error.
        </description>
      <priority>3</priority>
      <example>

import java.math.*;

class Test {
    void method1() {
        BigDecimal bd=new BigDecimal(10);
        bd.add(new BigDecimal(5));      // this will trigger the rule
    }
    void method2() {
        BigDecimal bd=new BigDecimal(10);
        bd = bd.add(new BigDecimal(5)); // this won't trigger the rule
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.LooseCouplingRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#loosecoupling"
         language="java"
         message="Avoid using implementation types like ''{0}''; use the interface instead"
         name="LooseCoupling"
         since="0.7">
      <description>
Excessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate
implementations in the future as requirements change. Whenever available, declare variables
and parameters using a more general type (e.g, `Set`).

This rule reports uses of concrete collection types. User-defined types that should be treated
the same as interfaces can be configured with the property `allowedTypes`.
        </description>
      <priority>3</priority>
      <example>

import java.util.ArrayList;
import java.util.HashSet;

public class Bar {
    // sub-optimal approach
    private ArrayList&lt;SomeType&gt; list = new ArrayList&lt;&gt;();

    public HashSet&lt;SomeType&gt; getFoo() {
        return new HashSet&lt;SomeType&gt;();
    }

    // preferred approach
    private List&lt;SomeType&gt; list = new ArrayList&lt;&gt;();

    public Set&lt;SomeType&gt; getFoo() {
        return new HashSet&lt;SomeType&gt;();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#finalfieldcouldbestatic"
         language="java"
         message="This final field could be made static"
         name="FinalFieldCouldBeStatic"
         since="1.1">
      <description>
If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead
in each object at runtime.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration
    [pmd-java:modifiers() = 'final']
    [not(pmd-java:modifiers() = 'static')]
    [not(./ancestor::ClassDeclaration[1][pmd-java:hasAnnotation('lombok.experimental.UtilityClass')])]
    [not(.//Annotation[pmd-java:typeIs('lombok.Builder.Default')])]
    /VariableDeclarator[*[pmd-java:nodeIs('Literal')]
         or VariableAccess[@Name = //FieldDeclaration[pmd-java:modifiers() = 'static']/VariableDeclarator/VariableId/@Name]
         or FieldAccess
         or ArrayAllocation/ArrayType/ArrayDimensions/ArrayDimExpr/NumericLiteral[@IntLiteral = true()][@Image = "0"]]
    /VariableId
        [not(@Name = //MethodDeclaration[not(pmd-java:modifiers() = 'static')]
            //SynchronizedStatement/(VariableAccess|FieldAccess[ThisExpression])/@Name)]</value>
         </property>
      </properties>
      <example>

public class Foo {
  public final int BAR = 42; // this could be static and save some space
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SimplifyConditionalRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#simplifyconditional"
         language="java"
         message="No need to check for null before an instanceof"
         name="SimplifyConditional"
         since="3.1">
      <description>
No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.
        </description>
      <priority>3</priority>
      <example>

class Foo {
  void bar(Object x) {
    if (x != null &amp;&amp; x instanceof Bar) {
      // just drop the "x != null" check
    }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.GuardLogStatementRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#guardlogstatement"
         language="java"
         message="Logger calls should be surrounded by log level guards."
         name="GuardLogStatement"
         since="5.1.0">
      <description>
Whenever using a log level, one should check if the loglevel is actually enabled, or
otherwise skip the associate String creation and manipulation.

An alternative to checking the log level are substituting parameters, formatters or lazy logging
with lambdas. The available alternatives depend on the actual logging framework.
        </description>
      <priority>2</priority>
      <example>

// Add this for performance
if (log.isDebugEnabled()) {
    log.debug("log something" + param1 + " and " + param2 + "concat strings");
}

// Avoid the guarding if statement with substituting parameters
log.debug("log something {} and {}", param1, param2);

// Avoid the guarding if statement with formatters
log.debug("log something %s and %s", param1, param2);

// Avoid the guarding if statement with lazy logging and lambdas
log.debug("log something expensive: {}", () -&gt; calculateExpensiveLoggingText());

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#missingserialversionuid"
         language="java"
         message="Classes implementing Serializable should set a serialVersionUID"
         name="MissingSerialVersionUID"
         since="3.0">
      <description>
Serializable classes should provide a serialVersionUID field.
The serialVersionUID field is also needed for abstract base classes. Each individual class in the inheritance
chain needs an own serialVersionUID field. See also [Should an abstract class have a serialVersionUID](https://stackoverflow.com/questions/893259/should-an-abstract-class-have-a-serialversionuid).
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
    [@Interface = false()]
    [count(ClassBody/FieldDeclaration/VariableDeclarator/VariableId[@Name='serialVersionUID']) = 0]
    [(ImplementsList | ExtendsList)/ClassType[pmd-java:typeIs('java.io.Serializable')]]</value>
         </property>
      </properties>
      <example>

public class Foo implements java.io.Serializable {
    String name;
    // Define serialization id to avoid serialization related bugs
    // i.e., public static final long serialVersionUID = 4328743;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#suspicioushashcodemethodname"
         language="java"
         message="The method name and return type are suspiciously close to hashCode()"
         name="SuspiciousHashcodeMethodName"
         since="1.5">
      <description>
The method name and return type are suspiciously close to hashCode(), which may denote an intention
to override the hashCode() method.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[
        lower-case(@Name) = 'hashcode'
    and @Name != 'hashCode'
    and @Arity = 0
    and PrimitiveType[@Kind = 'int']
]</value>
         </property>
      </properties>
      <example>

public class Foo {
    public int hashcode() { // oops, this probably was supposed to be 'hashCode'
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junit4testshouldusetestannotation"
         language="java"
         message="Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead."
         name="JUnit4TestShouldUseTestAnnotation"
         since="4.0">
      <description>
In JUnit 3, the framework executed all methods which started with the word test as a unit test.
In JUnit 4, only methods annotated with the @Test annotation are executed.
In JUnit 5, one of the following annotations should be used for tests: @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest.
In TestNG, only methods annotated with the @Test annotation are executed.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[matches(@SimpleName, $testClassPattern) or pmd-java:typeIs('junit.framework.TestCase')]
    (: a junit 3 method :)
    /ClassBody/MethodDeclaration[
        @Visibility="public"
        and starts-with(@Name, 'test')
        and not(ModifierList/Annotation[
          pmd-java:typeIs('org.junit.Test')
          or pmd-java:typeIs('org.junit.jupiter.api.Test')
          or pmd-java:typeIs('org.junit.jupiter.api.RepeatedTest')
          or pmd-java:typeIs('org.junit.jupiter.api.TestFactory')
          or pmd-java:typeIs('org.junit.jupiter.api.TestTemplate')
          or pmd-java:typeIs('org.junit.jupiter.params.ParameterizedTest')
          or pmd-java:typeIs('org.testng.annotations.Test')
          ]
        )
    ]</value>
         </property>
         <property description="The regex pattern used to identify test classes"
                   name="testClassPattern"
                   type="Regex">
            <value>Test</value>
         </property>
      </properties>
      <example>

public class MyTest {
    public void testBad() {
        doSomething();
    }

    @Test
    public void testGood() {
        doSomething();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.PreserveStackTraceRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#preservestacktrace"
         language="java"
         message="Thrown exception does not preserve the stack trace of exception ''{0}'' on all code paths"
         name="PreserveStackTrace"
         since="3.7">
      <description>
Reports exceptions that are thrown from within a catch block, yet don't refer to the
exception parameter declared by that catch block. The stack trace of the original
exception could be lost, which makes the thrown exception less informative.

To preserve the stack trace, the original exception may be used as the cause of
the new exception, using `Throwable#initCause`, or passed as a constructor argument
to the new exception. It may also be preserved using `Throwable#addSuppressed`.
The rule actually assumes that any method or constructor that takes the original
exception as argument preserves the original stack trace.

The rule allows `InvocationTargetException` and `PrivilegedActionException` to be
replaced by their cause exception. The discarded part of the stack trace is in those
cases only JDK-internal code, which is not very useful. The rule also ignores exceptions
whose name starts with `ignored`.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    void good() {
        try{
            Integer.parseInt("a");
        } catch (Exception e) {
            throw new Exception(e); // Ok, this initializes the cause of the new exception
        }
        try {
            Integer.parseInt("a");
        } catch (Exception e) {
            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.
        }
    }
    void wrong() {
        try{
            Integer.parseInt("a");
        } catch (Exception e) {
            // Violation: this only preserves the message and not the stack trace
            throw new Exception(e.getMessage());
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault"
         language="java"
         message="Switch statements should be exhaustive, add a default case (or missing enum branches)"
         name="SwitchStmtsShouldHaveDefault"
         since="1.0">
      <description>
            Switch statements should be exhaustive, to make their control flow
            easier to follow. This can be achieved by adding a `default` case, or,
            if the switch is on an enum type, by ensuring there is one switch branch
            for each enum constant.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//SwitchStatement[@DefaultCase = false() and @ExhaustiveEnumSwitch = false()]</value>
         </property>
      </properties>
      <example>

class Foo {{
    int x = 2;
    switch (x) {
      case 1: int j = 6;
      case 2: int j = 8;
      // missing default: here
    }
}}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#avoidthrowingnewinstanceofsameexception"
         language="java"
         message="A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided"
         name="AvoidThrowingNewInstanceOfSameException"
         since="4.2.5">
      <description>
Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to
code size and runtime complexity.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchClause
    [count(Block/*) = 1]
    [CatchParameter/ClassType/@SimpleName = Block/ThrowStatement/ConstructorCall/ClassType/@SimpleName]
    [Block/ThrowStatement/ConstructorCall/ArgumentList/@Size = 1]
    /Block/ThrowStatement/ConstructorCall</value>
         </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    } catch (SomeException se) {
        // harmless comment
        throw new SomeException(se);
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#dontimportsun"
         language="java"
         message="Avoid importing anything from the 'sun.*' packages"
         name="DontImportSun"
         since="1.5">
      <description>
Avoid importing anything from the 'sun.*' packages. These packages are not portable
and are likely to change.

If you find yourself having to depend on Sun APIs, confine this dependency to as
small a scope as possible, for instance by writing a stable wrapper class around
the unstable API. You can then suppress this rule in the implementation of the wrapper.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ImportDeclaration[starts-with(@ImportedName, 'sun.')]</value>
         </property>
      </properties>
      <example>

import sun.misc.foo;
public class Foo {}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#avoidusingnativecode"
         language="java"
         message="The use of native code is not recommended."
         name="AvoidUsingNativeCode"
         since="4.1">
      <description>
Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability
and increases the maintenance burden.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[TypeExpression/ClassType[pmd-java:typeIs('java.lang.System')]
                                    and @MethodName = 'loadLibrary']</value>
         </property>
      </properties>
      <example>

public class SomeJNIClass {

     public SomeJNIClass() {
         System.loadLibrary("nativelib");
     }

     static {
         System.loadLibrary("nativelib");
     }

     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
         System.loadLibrary("nativelib");
     }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.multithreading.NonThreadSafeSingletonRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#nonthreadsafesingleton"
         language="java"
         message="Singleton is not thread safe"
         name="NonThreadSafeSingleton"
         since="3.4">
      <description>
Non-thread safe singletons can result in bad state changes. Eliminate
static singletons if possible by instantiating the object directly. Static
singletons are usually not needed as only a single instance exists anyway.
Other possible fixes are to synchronize the entire method or to use an
[initialize-on-demand holder class](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom).

Refrain from using the double-checked locking pattern. The Java Memory Model doesn't
guarantee it to work unless the variable is declared as `volatile`, adding an uneeded
performance penalty. [Reference](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html)

See Effective Java, item 48.
        </description>
      <priority>3</priority>
      <example>

private static Foo foo = null;

//multiple simultaneous callers may see partially initialized objects
public static Foo getFoo() {
    if (foo==null) {
        foo = new Foo();
    }
    return foo;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryImportRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessaryimport"
         language="java"
         message="Unnecessary import ''{0}''"
         name="UnnecessaryImport"
         since="6.34.0">
      <description>
            Reports import statements that can be removed. They are either unused,
            duplicated, or the members they import are already implicitly in scope,
            because they're in java.lang, or the current package.
        </description>
      <priority>4</priority>
      <example>

            import java.io.File;            // not used, can be removed
            import java.util.Collections;   // used below
            import java.util.*;             // so this one is not used

            import java.lang.Object;        // imports from java.lang, unnecessary
            import java.lang.Object;        // duplicate, unnecessary

            public class Foo {
                static Object emptyList() {
                    return Collections.emptyList();
                }
            }
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly"
         language="java"
         message="Do not explicitly trigger a garbage collection."
         name="DoNotCallGarbageCollectionExplicitly"
         since="4.2">
      <description>
Calls to `System.gc()`, `Runtime.getRuntime().gc()`, and `System.runFinalization()` are not advised.
Code should have the same behavior whether the garbage collection is disabled using the option
`-Xdisableexplicitgc` or not.

Moreover, "modern" JVMs do a very good job handling garbage collections. If memory usage issues unrelated to memory
leaks develop within an application, it should be dealt with JVM options rather than within the code itself.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[
       pmd-java:matchesSig("java.lang.System#gc()")
    or pmd-java:matchesSig("java.lang.Runtime#gc()")
    or pmd-java:matchesSig("java.lang.System#runFinalization()")
    or pmd-java:matchesSig("java.lang.Runtime#runFinalization()")
]</value>
         </property>
      </properties>
      <example>

public class GCCall {
    public GCCall() {
        // Explicit gc call !
        System.gc();
    }

    public void doSomething() {
        // Explicit gc call !
        Runtime.getRuntime().gc();
    }

    public explicitGCcall() {
        // Explicit gc call !
        System.gc();
    }

    public void doSomething() {
        // Explicit gc call !
        Runtime.getRuntime().gc();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#usenotifyallinsteadofnotify"
         language="java"
         message="Call Thread.notifyAll() rather than Thread.notify()"
         name="UseNotifyAllInsteadOfNotify"
         since="3.0">
      <description>
Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only
one is chosen.  The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[@MethodName="notify" and ArgumentList[count(*) = 0]]</value>
         </property>
      </properties>
      <example>

  void bar() {
    x.notify();
    // If many threads are monitoring x, only one (and you won't know which) will be notified.
    // use instead:
    x.notifyAll();
  }

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.IdempotentOperationsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#idempotentoperations"
         language="java"
         message="Avoid idempotent operations (like assigning a variable to itself)."
         name="IdempotentOperations"
         since="2.0">
      <description>
Avoid idempotent operations - they have no effect.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
 public void bar() {
  int x = 2;
  x = x;
 }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.SingletonClassReturningNewInstanceRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance"
         language="java"
         message="getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
         name="SingletonClassReturningNewInstance"
         since="5.4">
      <description>
            A singleton class should only ever have one instance. Failure to check
            whether an instance has already been created may result in multiple
            instances being created.
        </description>
      <priority>2</priority>
      <example>

class Singleton {
    private static Singleton instance = null;
    public static Singleton getInstance() {
        synchronized(Singleton.class) {
            return new Singleton(); // this should be assigned to the field
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#genericsnaming"
         language="java"
         message="Generics names should be a one letter long and upper case."
         name="GenericsNaming"
         since="4.2.6">
      <description>
Names for references to generic values should be limited to a single uppercase letter.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//TypeParameter[
  string-length(@Name) &gt; 1
  or
  upper-case(@Name) != @Name
]</value>
         </property>
      </properties>
      <example>

public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; extends BaseDao {
    // This is ok...
}

public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; {
    // Also this
}

public interface GenericDao&lt;e extends BaseModel, K extends Serializable&gt; {
    // 'e' should be an 'E'
}

public interface GenericDao&lt;EF extends BaseModel, K extends Serializable&gt; {
   // 'EF' is not ok.
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_codestyle.html#unnecessaryblock"
         language="ecmascript"
         message="Unnecessary block."
         name="UnnecessaryBlock"
         since="5.0">
      <description>
An unnecessary Block is present.  Such Blocks are often used in other languages to
introduce a new variable scope.  Blocks do not behave like this in ECMAScipt, and using them can
be misleading.  Considering removing this unnecessary Block.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>/AstRoot/Scope[not(preceding::EmptyStatement)]
                    | //SwitchCase[Scope]
                    | //(Scope|Block)[Scope|Block][count(*) = 1]</value>
         </property>
      </properties>
      <example>

if (foo) {
    // Ok
}
if (bar) {
    {
        // Bad
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#simplifybooleanreturns"
         language="java"
         message="This if statement can be replaced by `{0}`"
         name="SimplifyBooleanReturns"
         since="0.9">
      <description>
Avoid unnecessary if-then-else statements when returning a boolean. The result of
the conditional test can be returned instead.
        </description>
      <priority>3</priority>
      <example>

public boolean isBarEqualTo(int x) {
    if (bar == x) {      // this bit of code...
        return true;
    } else {
        return false;
    }
}

public boolean isBarEqualTo(int x) {
    return bar == x;    // can be replaced with this
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.SingleMethodSingletonRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#singlemethodsingleton"
         language="java"
         message="Class contains multiple getInstance methods. Please review."
         name="SingleMethodSingleton"
         since="5.4">
      <description>
Some classes contain overloaded getInstance. The problem with overloaded getInstance methods
is that the instance created using the overloaded method is not cached and so,
for each call and new objects will be created for every invocation.
        </description>
      <priority>2</priority>
      <example>

public class Singleton {

    private static Singleton singleton = new Singleton( );

    private Singleton(){ }

    public static Singleton getInstance( ) {
        return singleton;
    }

    public static Singleton getInstance(Object obj){
        Singleton singleton = (Singleton) obj;
        return singleton;           //violation
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#logicinversion"
         language="java"
         message="Use opposite operator instead of the logic complement operator."
         name="LogicInversion"
         since="5.0">
      <description>
Use opposite operator instead of negating the whole expression with a logic complement operator.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//UnaryExpression[@Operator='!']/InfixExpression[@Operator = ('==', '!=', '&lt;', '&gt;', '&lt;=', '&gt;=')]</value>
         </property>
      </properties>
      <example>

public boolean bar(int a, int b) {

    if (!(a == b)) { // use !=
         return false;
     }

    if (!(a &lt; b)) { // use &gt;=
         return false;
    }

    return true;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#arrayisstoreddirectly"
         language="java"
         message="The user-supplied array ''{0}'' is stored directly."
         name="ArrayIsStoredDirectly"
         since="2.2">
      <description>
Constructors and methods receiving arrays should clone objects and store the copy.
This prevents future changes from the user from affecting the original array.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    private String [] x;
        public void foo (String [] param) {
        // Don't do this, make a copy of the array at least
        this.x=param;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.html.rule.bestpractices.UseAltAttributeForImagesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_html_bestpractices.html#usealtattributeforimages"
         language="html"
         message="The image is missing an alternate text."
         name="UseAltAttributeForImages"
         since="6.45.0">
      <description>
            Always use an "alt" attribute for images. This provides an alternative text and is extensively used
            by screen readers.
        </description>
      <priority>3</priority>
      <example>
            
&lt;!-- instead of --&gt;
&lt;img src="house.jpeg"&gt;

&lt;!-- use this --&gt;
&lt;img src="house.jpeg" alt="A house from the 18th century"&gt;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UseDiamondOperatorRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#usediamondoperator"
         language="java"
         message="Explicit type arguments can be replaced by a diamond: `{0}`"
         minimumLanguageVersion="1.7"
         name="UseDiamondOperator"
         since="6.11.0">
      <description>
In some cases, explicit type arguments in a constructor call for a generic type
may be replaced by diamond type arguments (`&lt;&gt;`), and be inferred by the compiler.
This rule recommends that you use diamond type arguments anywhere possible, since
it avoids duplication of the type arguments, and makes the code more concise and readable.

This rule is useful when upgrading a codebase to Java 1.7, Java 1.8, or Java 9.
The diamond syntax was first introduced in Java 1.7. In Java 8, improvements in Java's
type inference made more type arguments redundant. In Java 9, type arguments inference
was made possible for anonymous class constructors.
            </description>
      <priority>3</priority>
      <example>
            
            import java.util.*;
            class Foo {
                static {
                    List&lt;String&gt; strings;
                    strings = new ArrayList&lt;String&gt;(); // unnecessary duplication of type parameters
                    strings = new ArrayList&lt;&gt;();       // using diamond type arguments is more concise

                    strings = new ArrayList(); // accidental use of a raw type, you can use ArrayList&lt;&gt; instead

                    strings = new ArrayList&lt;&gt;() {
                        // for anonymous classes, this is possible since Java 9 only
                    };
                }
            }
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidstringbufferfield"
         language="java"
         message="StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
         name="AvoidStringBufferField"
         since="4.2">
      <description>
StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks
if held within objects with long lifetimes.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration/ClassType[pmd-java:typeIs('java.lang.StringBuffer') or pmd-java:typeIs('java.lang.StringBuilder')]</value>
         </property>
      </properties>
      <example>

public class Foo {
    private StringBuffer buffer;    // potential memory leak as an instance variable;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.documentation.CommentContentRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_documentation.html#commentcontent"
         language="java"
         message="Invalid words or phrases found"
         name="CommentContent"
         since="5.0">
      <description>
A rule for the politically correct... we don't want to offend anyone.
        </description>
      <priority>3</priority>
      <example>

//OMG, this is horrible, Bob is an idiot !!!

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_bestpractices.html#usebasewithparseint"
         language="ecmascript"
         message="Always provide a base when using parseInt() functions"
         name="UseBaseWithParseInt"
         since="5.0.1">
      <description>
This rule checks for usages of parseInt. While the second parameter is optional and usually defaults
to 10 (base/radix is 10 for a decimal number), different implementations may behave differently.
It also improves readability, if the base is given.

See also: [parseInt()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//FunctionCall/Name[
     @Identifier = 'parseInt'
     and
     count(../*) &lt; 3
]</value>
         </property>
      </properties>
      <example>

parseInt("010");    // unclear, could be interpreted as 10 or 7 (with a base of 7)

parseInt("10", 10); // good

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.ProperCloneImplementationRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#propercloneimplementation"
         language="java"
         message="Object clone() should be implemented with super.clone()"
         name="ProperCloneImplementation"
         since="1.4">
      <description>
Object clone() should be implemented with super.clone().
        </description>
      <priority>2</priority>
      <example>

class Foo{
    public Object clone(){
        return new Foo(); // This is bad
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryModifierRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessarymodifier"
         language="java"
         message="Unnecessary modifier{0} on {1} ''{2}''{3}"
         name="UnnecessaryModifier"
         since="1.02">
      <description>
Fields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.
Classes, interfaces or annotations nested in an interface or annotation are automatically `public static`
(all nested interfaces and annotations are automatically static).
Nested enums are automatically `static`.
For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.
        </description>
      <priority>3</priority>
      <example>

public @interface Annotation {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public interface Foo {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public class Bar {
    public static interface Baz {}  // static ignored
    public static enum FoorBar {    // static ignored
        FOO;
    }
}
public class FooClass {
    static record BarRecord() {}     // static ignored
}
public interface FooInterface {
    static record BarRecord() {}     // static ignored
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#shortclassname"
         language="java"
         message="Avoid short class names like {0}"
         name="ShortClassName"
         since="5.0">
      <description>
Short Classnames with fewer than e.g. five characters are not recommended.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[string-length(@SimpleName) &lt; $minimum]</value>
         </property>
         <property description="Number of characters that are required as a minimum for a class name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>5</value>
         </property>
      </properties>
      <example>

public class Foo {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.AtLeastOneConstructorRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#atleastoneconstructor"
         language="java"
         message="Each class should declare at least one constructor"
         name="AtLeastOneConstructor"
         since="1.04">
      <description>

Each non-static class should declare at least one constructor.
Classes with solely static members are ignored, refer to [UseUtilityClassRule](pmd_rules_java_design.html#useutilityclass) to detect those.

        </description>
      <priority>3</priority>
      <example>

public class Foo {
   // missing constructor
  public void doSomething() { ... }
  public void doOtherThing { ... }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#whileloopwithliteralboolean"
         language="java"
         message="The loop can be simplified."
         name="WhileLoopWithLiteralBoolean"
         since="6.13.0">
      <description>
`do {} while (true);` requires reading the end of the statement before it is
apparent that it loops forever, whereas `while (true) {}` is easier to understand.

`do {} while (false);` is redundant, and if an inner variable scope is required,
a block `{}` is sufficient.

`while (false) {}` will never execute the block and can be removed in its entirety.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>(: while loops with single boolean literal 'false', maybe parenthesized :)
//WhileStatement/BooleanLiteral[@True = false()]
|
(: do-while loops with single boolean literal ('false' or 'true'), maybe parenthesized :)
//DoStatement/BooleanLiteral
|
(: while loops with conditional or'ed boolean literals, maybe parenthesized :)
//WhileStatement[(InfixExpression[@Operator = ('|', '||')])
    (: no var access :)
    [count(VariableAccess) = 0]
    (: at least one false literal :)
    [count(BooleanLiteral[@True = false()]) &gt;= 1]]
|
(: while loops with conditional and'ed boolean literals, maybe parenthesized :)
//WhileStatement[(InfixExpression[@Operator = ('&amp;', '&amp;&amp;')])
    (: at least one false literal :)
    [count(BooleanLiteral[@True = false()]) &gt;= 1]]
|
(: do-while loops with conditional or'ed boolean literals, maybe parenthesized :)
//DoStatement[(InfixExpression[@Operator = ('|', '||')])
    (: at least one true literal :)
    [count(BooleanLiteral[@True = true()]) &gt;= 1
      (: or only boolean literal and no no var access :)
      or count(BooleanLiteral) &gt;= 1
      and count(VariableAccess) = 0
    ]]
|
(: do-while loops with conditional and'ed boolean literals, maybe parenthesized :)
//DoStatement[(InfixExpression[@Operator = ('&amp;', '&amp;&amp;')])
    (: at least one false literal :)
    [count(BooleanLiteral[@True = false()]) &gt;= 1
      (: or only boolean literal and no no var access :)
      or count(BooleanLiteral) &gt;= 1
      and count(VariableAccess) = 0
    ]]</value>
         </property>
      </properties>
      <example>

public class Example {
  {
    while (true) { } // allowed
    while (false) { } // disallowed
    do { } while (true); // disallowed
    do { } while (false); // disallowed
    do { } while (false | false); // disallowed
    do { } while (false || false); // disallowed
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidcatchingthrowable"
         language="java"
         message="A catch statement should never catch throwable since it includes errors."
         name="AvoidCatchingThrowable"
         since="1.2">
      <description>
Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as
OutOfMemoryError that should be exposed and managed separately.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchParameter[ClassType[pmd-java:typeIsExactly('java.lang.Throwable')]]/VariableId</value>
         </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    } catch (Throwable th) {  // should not catch Throwable
        th.printStackTrace();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#shortmethodname"
         language="java"
         message="Avoid using short method names"
         name="ShortMethodName"
         since="0.3">
      <description>
Method names that are very short are not helpful to the reader.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[string-length(@Name) &lt; $minimum]</value>
         </property>
         <property description="Number of characters that are required as a minimum for a method name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>3</value>
         </property>
      </properties>
      <example>

public class ShortMethod {
    public void a( int i ) { // Violation
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.NullAssignmentRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#nullassignment"
         language="java"
         message="Assigning an Object to null is a code smell.  Consider refactoring."
         name="NullAssignment"
         since="1.02">
      <description>
Assigning a "null" to a variable (outside of its declaration) is usually bad form.  Sometimes, this type
of assignment is an indication that the programmer doesn't completely understand what is going on in the code.

NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.
        </description>
      <priority>3</priority>
      <example>
 
public void bar() {
  Object x = null; // this is OK
  x = new Object();
     // big, complex piece of code here
  x = null; // this is not required
     // big, complex piece of code here
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.LoosePackageCouplingRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#loosepackagecoupling"
         language="java"
         message="Use of ''{0}'' outside of package hierarchy ''{1}'' is not recommended; use recommended classes instead"
         name="LoosePackageCoupling"
         since="5.0">
      <description>
Avoid using classes from the configured package hierarchy outside of the package hierarchy,
except when using one of the configured allowed classes.
        </description>
      <priority>3</priority>
      <example>

package some.package;

import some.other.package.subpackage.subsubpackage.DontUseThisClass;

public class Bar {
    DontUseThisClass boo = new DontUseThisClass();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#finalizeoverloaded"
         language="java"
         message="Finalize methods should not be overloaded"
         name="FinalizeOverloaded"
         since="1.5">
      <description>
Methods named finalize() should not have parameters.  It is confusing and most likely an attempt to
overload Object.finalize(). It will not be called by the VM.

Note that Oracle has declared Object.finalize() as deprecated since JDK 9.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name='finalize'][@Arity &gt; 0]</value>
         </property>
      </properties>
      <example>

public class Foo {
    // this is confusing and probably a bug
    protected void finalize(int a) {
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.UseTryWithResourcesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#usetrywithresources"
         language="java"
         message="Consider using a try-with-resources statement instead of explicitly closing the resource"
         minimumLanguageVersion="1.7"
         name="UseTryWithResources"
         since="6.12.0">
      <description>
Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end
of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions
are better handled: If an exception occurred both in the `try` block and `finally` block, then the exception from
the try block was suppressed. With the `try`-with-resources statement, the exception thrown from the try-block is
preserved.
        </description>
      <priority>3</priority>
      <example>

public class TryWithResources {
    public void run() {
        InputStream in = null;
        try {
            in = openInputStream();
            int i = in.read();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
            } catch (IOException ignored) {
                // ignored
            }
        }

        // better use try-with-resources
        try (InputStream in2 = openInputStream()) {
            int i = in2.read();
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.FieldDeclarationsShouldBeAtStartOfClassRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass"
         language="java"
         message="Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes."
         name="FieldDeclarationsShouldBeAtStartOfClass"
         since="5.0">
      <description>
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
        </description>
      <priority>3</priority>
      <example>

public class HelloWorldBean {

  // Field declared before methods / inner classes - OK
  private String _thing;

  public String getMessage() {
    return "Hello World!";
  }

  // Field declared after methods / inner classes - avoid this
  private String _fieldInWrongLocation;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.LinguisticNamingRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#linguisticnaming"
         language="java"
         message="Linguistics Antipattern - Method name and return type is inconsistent linguistically"
         name="LinguisticNaming"
         since="6.7.0">
      <description>
            This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should
            be boolean but have a different type. It also checks for methods, that according to their name, should
            return a boolean, but don't. Further, it checks, that getters return something and setters won't.
            Finally, it checks that methods, that start with "to" - so called transform methods - actually return
            something, since according to their name, they should convert or transform one object into another.
            There is additionally an option, to check for methods that contain "To" in their name - which are
            also transform methods. However, this is disabled by default, since this detection is prone to
            false positives.

            For more information, see [Linguistic Antipatterns - What They Are and How
Developers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).
        </description>
      <priority>3</priority>
      <example>

public class LinguisticNaming {
    int isValid;    // the field name indicates a boolean, but it is an int.
    boolean isTrue; // correct type of the field

    void myMethod() {
        int hasMoneyLocal;      // the local variable name indicates a boolean, but it is an int.
        boolean hasSalaryLocal; // correct naming and type
    }

    // the name of the method indicates, it is a boolean, but the method returns an int.
    int isValid() {
        return 1;
    }
    // correct naming and return type
    boolean isSmall() {
        return true;
    }

    // the name indicates, this is a setter, but it returns something
    int setName() {
        return 1;
    }

    // the name indicates, this is a getter, but it doesn't return anything
    void getName() {
        // nothing to return?
    }

    // the name indicates, it transforms an object and should return the result
    void toDataType() {
        // nothing to return?
    }
    // the name indicates, it transforms an object and should return the result
    void grapeToWine() {
        // nothing to return?
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#misplacednullcheck"
         language="java"
         message="The null check here is misplaced; if the variable ''{0}'' is null there will be a NullPointerException"
         name="MisplacedNullCheck"
         since="3.5">
      <description>
The null check here is misplaced. If the variable is null a `NullPointerException` will be thrown.
Either the check is useless (the variable will never be `null`) or it is incorrect.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression[@Operator = '&amp;&amp;']
    /InfixExpression[@Operator = '!=']
        (: one side is null :)
        [NullLiteral]
        (: other side checks for the variable used somewhere in the first child of conditional and expression :)
        [VariableAccess]
        [some $var in preceding-sibling::*//VariableAccess
            [parent::MethodCall or parent::FieldAccess]
            [not(ancestor::InfixExpression[@Operator = '||'])]
            /@Name
            satisfies $var = VariableAccess/@Name
        ]
    /VariableAccess
|
//InfixExpression[@Operator = '||']
    /InfixExpression[@Operator = '==']
        (: one side is null :)
        [NullLiteral]
        (: other side checks for the variable used somewhere in the first child of conditional or expression :)
        [VariableAccess]
        [some $var in preceding-sibling::*//VariableAccess
            [parent::MethodCall or parent::FieldAccess]
            [not(ancestor::InfixExpression[@Operator = '&amp;&amp;'])]
            /@Name
            satisfies $var = VariableAccess/@Name
        ]
    /VariableAccess</value>
         </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        if (a.equals(baz) &amp;&amp; a != null) {} // a could be null, misplaced null check

        if (a != null &amp;&amp; a.equals(baz)) {} // correct null check
    }
}

        </example>
      <example>

public class Foo {
    void bar() {
        if (a.equals(baz) || a == null) {} // a could be null, misplaced null check

        if (a == null || a.equals(baz)) {} // correct null check
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryConstructorRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessaryconstructor"
         language="java"
         message="Avoid unnecessary constructors - the compiler will generate these for you"
         name="UnnecessaryConstructor"
         since="1.0">
      <description>
This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the
constructor is identical to the default constructor. The default constructor should has same access
modifier as the declaring class. In an enum type, the default constructor is implicitly private.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
  public Foo() {}
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#donotusethreads"
         language="java"
         message="To be compliant to J2EE, a webapp should not use any thread."
         name="DoNotUseThreads"
         since="4.1">
      <description>
The J2EE specification explicitly forbids the use of threads. Threads are resources, that should be managed and monitored by the J2EE server.
If the application creates threads on its own or uses own custom thread pools, then these threads are not managed, which could lead to resource exhaustion.
Also, EJBs might be moved between machines in a cluster and only managed resources can be moved along.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassType
[pmd-java:typeIs('java.lang.Thread') or pmd-java:typeIs('java.util.concurrent.ExecutorService')]
(: allow Thread.currentThread().getContextClassLoader() :)
[not(parent::TypeExpression[parent::MethodCall[pmd-java:matchesSig('_#currentThread()')
                                               and parent::MethodCall[pmd-java:matchesSig('_#getContextClassLoader()')]
                                              ]
                           ]
)]
(: exclude duplicated types on the same line :)
 [not((parent::FieldDeclaration|parent::LocalVariableDeclaration)/VariableDeclarator/*[2][pmd-java:typeIs('java.lang.Thread') or pmd-java:typeIs('java.util.concurrent.ExecutorService')])
 or
  @BeginLine != (parent::FieldDeclaration|parent::LocalVariableDeclaration)/VariableDeclarator/ConstructorCall/ClassType/@BeginLine]
|
//MethodCall[*[1][not(pmd-java:nodeIs('MethodCall'))][pmd-java:nodeIs('Expression') and (pmd-java:typeIs('java.util.concurrent.Executors')
   or pmd-java:typeIs('java.util.concurrent.ExecutorService'))]]</value>
         </property>
      </properties>
      <example>

// This is not allowed
public class UsingThread extends Thread {

}

// Neither this,
public class UsingExecutorService {

    public void methodX() {
        ExecutorService executorService = Executors.newFixedThreadPool(5);
    }
}

// Nor this,
public class Example implements ExecutorService {

}

// Nor this,
public class Example extends AbstractExecutorService {

}

// Nor this
public class UsingExecutors {

    public void methodX() {
        Executors.newSingleThreadExecutor().submit(() -&gt; System.out.println("Hello!"));
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidaccessibilityalteration"
         language="java"
         message="You should not modify visibility of constructors, methods or fields using setAccessible()"
         name="AvoidAccessibilityAlteration"
         since="4.1">
      <description>
Methods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also
return private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`.
This gives access to normally protected data which violates the principle of encapsulation.

This rule detects calls to `setAccessible` and finds possible accessibility alterations.
If the call to `setAccessible` is wrapped within a `PrivilegedAction`, then the access alteration
is assumed to be deliberate and is not reported.

Note that with Java 17 the Security Manager, which is used for `PrivilegedAction` execution,
is deprecated: [JEP 411: Deprecate the Security Manager for Removal](https://openjdk.org/jeps/411).
For future-proof code, deliberate access alteration should be suppressed using the usual
suppression methods (e.g. by using `@SuppressWarnings` annotation).
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[
          pmd-java:matchesSig("java.lang.reflect.AccessibleObject#setAccessible(boolean)")
       or pmd-java:matchesSig("_#setAccessible(java.lang.reflect.AccessibleObject[],boolean)")
    ]
    [not(ArgumentList/BooleanLiteral[@True = false()])]
    (: exclude anonymous privileged action classes :)
    [not(ancestor::ConstructorCall[1][pmd-java:typeIs('java.security.PrivilegedAction')]/AnonymousClassDeclaration)]
    (: exclude inner privileged action classes :)
    [not(ancestor::ClassDeclaration[1][pmd-java:typeIs('java.security.PrivilegedAction')])]
    (: exclude privileged action lambdas :)
    [not(ancestor::LambdaExpression[pmd-java:typeIs('java.security.PrivilegedAction')])]</value>
         </property>
      </properties>
      <example>

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedAction;

public class Violation {
    private void invalidSetAccessCalls() throws NoSuchMethodException, SecurityException {
        Constructor&lt;?&gt; constructor = this.getClass().getDeclaredConstructor(String.class);
        // call to forbidden setAccessible
        constructor.setAccessible(true);

        Method privateMethod = this.getClass().getDeclaredMethod("aPrivateMethod");
        // call to forbidden setAccessible
        privateMethod.setAccessible(true);

        // deliberate accessibility alteration
        String privateField = AccessController.doPrivileged(new PrivilegedAction&lt;String&gt;() {
            @Override
            public String run() {
                try {
                    Field field = Violation.class.getDeclaredField("aPrivateField");
                    field.setAccessible(true);
                    return (String) field.get(null);
                } catch (ReflectiveOperationException | SecurityException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures"
         language="java"
         message="A method or constructor should not explicitly declare unchecked exceptions in its ''throws'' clause"
         name="AvoidUncheckedExceptionsInSignatures"
         since="6.13.0">
      <description>
Reports unchecked exceptions in the `throws` clause of a method or constructor.
Java doesn't force the caller to handle an unchecked exception,
so it's unnecessary except for documentation. A better practice is to document the
exceptional cases with a `@throws` Javadoc tag, which allows being more descriptive.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ThrowsList/ClassType[pmd-java:typeIs('java.lang.RuntimeException')]</value>
         </property>
      </properties>
      <example>

public void foo() throws RuntimeException {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_codestyle.html#unreachablecode"
         language="ecmascript"
         message="A ''return'', ''break'', ''continue'', or ''throw'' statement should be the last in a block."
         name="UnreachableCode"
         since="5.0">
      <description>
A 'return', 'break', 'continue', or 'throw' statement should be the last in a block. Statements after these
will never execute.  This is a bug, or extremely poor style.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ReturnStatement[following-sibling::node()]
|
    //ContinueStatement[following-sibling::node()]
|
    //BreakStatement[following-sibling::node()]
|
    //ThrowStatement[following-sibling::node()]</value>
         </property>
      </properties>
      <example>

// Ok
function foo() {
   return 1;
}
// Bad
function bar() {
   var x = 1;
   return x;
   x = 2;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.html.rule.bestpractices.UnnecessaryTypeAttributeRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_html_bestpractices.html#unnecessarytypeattribute"
         language="html"
         message="Type attribute for link and script elements is not needed."
         name="UnnecessaryTypeAttribute"
         since="6.45.0">
      <description>
            In HTML5 the explicit type attribute for link and script elements is not needed. Modern browsers expect
            stylesheets to be in CSS and scripts to use JavaScript.
        </description>
      <priority>3</priority>
      <example>
            
&lt;!-- Instead of --&gt;
&lt;link type="text/css" rel="stylesheet" href="css/styles.css" /&gt;
&lt;script type="text/javascript" src="js/scripts.js"&gt;&lt;/script&gt;

&lt;!-- Just use --&gt;
&lt;link rel="stylesheet" href="css/styles.css" /&gt;
&lt;script src="js/scripts.js"&gt;&lt;/script&gt;

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestContainsTooManyAssertsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junittestcontainstoomanyasserts"
         language="java"
         message="Unit tests should not contain more than ${maximumAsserts} assert(s)."
         name="JUnitTestContainsTooManyAsserts"
         since="5.0">
      <description>
Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which
it is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.
Customize the maximum number of assertions used by this Rule to suit your needs.

This rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with "test".
        </description>
      <priority>3</priority>
      <example>

public class MyTestCase extends TestCase {
    // Ok
    public void testMyCaseWithOneAssert() {
        boolean myVar = false;
        assertFalse("should be false", myVar);
    }

    // Bad, too many asserts (assuming max=1)
    public void testMyCaseWithMoreAsserts() {
        boolean myVar = false;
        assertFalse("myVar should be false", myVar);
        assertEquals("should equals false", false, myVar);
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#unconditionalifstatement"
         language="java"
         message="Do not use 'if' statements that are always true or always false"
         name="UnconditionalIfStatement"
         since="1.5">
      <description>
Do not use "if" statements whose conditionals are always true or always false.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//IfStatement[BooleanLiteral[1]]</value>
         </property>
      </properties>
      <example>

public class Foo {
    public void close() {
        if (true) {        // fixed conditional, not recommended
            // ...
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junit5testshouldbepackageprivate"
         language="java"
         message="JUnit 5 tests should be package-private."
         name="JUnit5TestShouldBePackagePrivate"
         since="6.35.0">
      <description>
Reports JUnit 5 test classes and methods that are not package-private.
Contrary to JUnit 4 tests, which required public visibility to be run by the engine,
JUnit 5 tests can also be run if they're package-private. Marking them as such
is a good practice to limit their visibility.

Test methods are identified as those which use `@Test`, `@RepeatedTest`,
`@TestFactory`, `@TestTemplate` or `@ParameterizedTest`.
            </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[
    (: a Junit 5 test class, ie, it has methods with the annotation :)
    @Interface = false() and
    ClassBody/MethodDeclaration
    [ModifierList/Annotation[
               pmd-java:typeIs('org.junit.jupiter.api.Test')
            or pmd-java:typeIs('org.junit.jupiter.api.RepeatedTest')
            or pmd-java:typeIs('org.junit.jupiter.api.TestFactory')
            or pmd-java:typeIs('org.junit.jupiter.api.TestTemplate')
            or pmd-java:typeIs('org.junit.jupiter.params.ParameterizedTest')
    ]]
]/(
       self::*[@Abstract = false() and @Visibility = ("public", "protected")]
|      ClassBody/MethodDeclaration
       [@Visibility = ("public", "protected")]
       [ModifierList/Annotation[
               pmd-java:typeIs('org.junit.jupiter.api.Test')
            or pmd-java:typeIs('org.junit.jupiter.api.RepeatedTest')
            or pmd-java:typeIs('org.junit.jupiter.api.TestFactory')
            or pmd-java:typeIs('org.junit.jupiter.api.TestTemplate')
            or pmd-java:typeIs('org.junit.jupiter.params.ParameterizedTest')
       ]]
)</value>
         </property>
      </properties>
      <example>
            
class MyTest { // not public, that's fine
    @Test
    public void testBad() { } // should not have a public modifier

    @Test
    protected void testAlsoBad() { } // should not have a protected modifier

    @Test
    private void testNoRun() { } // should not have a private modifier

    @Test
    void testGood() { } // package private as expected
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#unnecessaryconversiontemporary"
         language="java"
         message="Avoid unnecessary temporaries when converting primitives to Strings"
         name="UnnecessaryConversionTemporary"
         since="0.1">
      <description>
Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods
on the wrapper classes instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[@MethodName = 'toString']
    [ConstructorCall[position() = 1]
        [
            pmd-java:typeIs('java.lang.Integer')
         or pmd-java:typeIs('java.lang.Long')
         or pmd-java:typeIs('java.lang.Float')
         or pmd-java:typeIs('java.lang.Byte')
         or pmd-java:typeIs('java.lang.Double')
         or pmd-java:typeIs('java.lang.Short')
        ]
    ]</value>
         </property>
      </properties>
      <example>

public String convert(int x) {
    String foo = new Integer(x).toString(); // this wastes an object

    return Integer.toString(x);             // preferred approach
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#returnfromfinallyblock"
         language="java"
         message="Avoid returning from a finally block"
         name="ReturnFromFinallyBlock"
         since="1.05">
      <description>
Avoid returning from a finally block, this can discard exceptions.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FinallyClause//ReturnStatement except //FinallyClause//(MethodDeclaration|LambdaExpression)//ReturnStatement</value>
         </property>
      </properties>
      <example>

public class Bar {
    public String foo() {
        try {
            throw new Exception( "My Exception" );
        } catch (Exception e) {
            throw e;
        } finally {
            return "A. O. K."; // return not recommended here
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#simpledateformatneedslocale"
         language="java"
         message="When instantiating a SimpleDateFormat object, specify a Locale"
         name="SimpleDateFormatNeedsLocale"
         since="2.0">
      <description>
Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate
formatting is used.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ConstructorCall
    [pmd-java:typeIs('java.text.SimpleDateFormat')]
    [ArgumentList/@Size = 1]</value>
         </property>
      </properties>
      <example>

public class Foo {
  // Should specify Locale.US (or whatever)
  private SimpleDateFormat sdf = new SimpleDateFormat("pattern");
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.LocalVariableCouldBeFinalRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal"
         language="java"
         message="Local variable ''{0}'' could be declared final"
         name="LocalVariableCouldBeFinal"
         since="2.2">
      <description>
A local variable assigned only once can be declared final.
        </description>
      <priority>3</priority>
      <example>

public class Bar {
    public void foo () {
    String txtA = "a";          // if txtA will not be assigned again it is better to do this:
    final String txtB = "b";
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#accessormethodgeneration"
         language="java"
         maximumLanguageVersion="10"
         message="Consider giving this member package visibility to access it from {0} without a synthetic accessor method"
         name="AccessorMethodGeneration"
         since="5.5.4">
      <description>
When accessing private fields / methods from another class, the Java compiler will generate accessor methods
with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can
be avoided by changing the visibility of the field / method from private to package-private.


_Note:_ This rule is only executed for Java 10 or lower.
Since Java 11, [JEP 181: Nest-Based Access Control](https://openjdk.org/jeps/181) has been implemented. This
means that in Java 11 and above accessor classes are not generated anymore.
        </description>
      <priority>3</priority>
      <example>

public class OuterClass {
    private int counter;
    /* package */ int id;

    public class InnerClass {
        InnerClass() {
            OuterClass.this.counter++; // wrong accessor method will be generated
        }

        public int getOuterClassId() {
            return OuterClass.this.id; // id is package-private, no accessor method needed
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#defaultlabelnotlastinswitchstmt"
         language="java"
         message="The default label should be the last label in a switch statement"
         name="DefaultLabelNotLastInSwitchStmt"
         since="1.5">
      <description>
By convention, the default label should be the last label in a switch statement.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//SwitchLabel[@Default = true() and not(.. is ../../*[last()])]</value>
         </property>
      </properties>
      <example>

public class Foo {
  void bar(int a) {
   switch (a) {
    case 1:  // do something
       break;
    default:  // the default case should be last, by convention
       break;
    case 2:
       break;
   }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#finalparameterinabstractmethod"
         language="java"
         message="Final parameter in abstract method"
         name="FinalParameterInAbstractMethod"
         since="6.42.0">
      <description>
            Declaring a method parameter as final for an interface method is useless because the implementation may choose to not respect it.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration
    [FormalParameters/FormalParameter[@Final = true()]]
    [not(Block)]</value>
         </property>
      </properties>
      <example>
            
public interface MyInterface {
  void process(final Object arg); // Avoid using final here
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidprintstacktrace"
         language="java"
         message="Avoid printStackTrace(); use a logger call instead."
         name="AvoidPrintStackTrace"
         since="3.2">
      <description>
Avoid printStackTrace(); use a logger call instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[ pmd-java:matchesSig("java.lang.Throwable#printStackTrace()") ]</value>
         </property>
      </properties>
      <example>

class Foo {
    void bar() {
        try {
            // do something
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SingularFieldRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#singularfield"
         language="java"
         message="Perhaps ''{0}'' could be replaced by a local variable."
         name="SingularField"
         since="3.1">
      <description>
Reports fields which may be converted to a local variable. This is so because
in every method where the field is used, it is assigned before it is first read.
Hence, the value that the field had before the method call may not be observed,
so it might as well not be stored in the enclosing object.

Limitations: We can only check private fields for now.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    private int x; // this will be reported

    public int foo(int y) {
       x = y + 5; // assigned before any read
       return x;
    }

    public int fooOk(int y) {
       int z = y + 5; // might as well be a local like here
       return z;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.UseCollectionIsEmptyRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#usecollectionisempty"
         language="java"
         message="Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()"
         name="UseCollectionIsEmpty"
         since="3.9">
      <description>
The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements.
Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    void good() {
        List foo = getList();
        if (foo.isEmpty()) {
            // blah
        }
    }

    void bad() {
        List foo = getList();
        if (foo.size() == 0) {
            // blah
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.MethodReturnsInternalArrayRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#methodreturnsinternalarray"
         language="java"
         message="Returning ''{0}'' may expose an internal array."
         name="MethodReturnsInternalArray"
         since="2.2">
      <description>
Exposing internal arrays to the caller violates object encapsulation since elements can be
removed or replaced outside of the object that owns it. It is safer to return a copy of the array.
        </description>
      <priority>3</priority>
      <example>

public class SecureSystem {
    UserData [] ud;
    public UserData [] getUserData() {
        // Don't return directly the internal array, return a copy
        return ud;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#finalizeshouldbeprotected"
         language="java"
         message="If you override finalize(), make it protected"
         name="FinalizeShouldBeProtected"
         since="1.1">
      <description>
When overriding the finalize(), the new method should be set as protected.  If made public,
other classes may invoke it at inappropriate times.

Note that Oracle has declared Object.finalize() as deprecated since JDK 9.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Visibility != "protected"][@Name='finalize'][@Arity = 0]</value>
         </property>
      </properties>
      <example>

public void finalize() {
    // do something
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoiddecimalliteralsinbigdecimalconstructor"
         language="java"
         message="Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal"
         name="AvoidDecimalLiteralsInBigDecimalConstructor"
         since="3.4">
      <description>
One might assume that the result of "new BigDecimal(0.1)" is exactly equal to 0.1, but it is actually
equal to .1000000000000000055511151231257827021181583404541015625.
This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite
length). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1,
appearances notwithstanding.

The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal("0.1")' is
exactly equal to 0.1, as one would expect.  Therefore, it is generally recommended that the
(String) constructor be used in preference to this one.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ConstructorCall[pmd-java:matchesSig('java.math.BigDecimal#new(double)')]</value>
         </property>
      </properties>
      <example>

BigDecimal bd = new BigDecimal(1.123);       // loss of precision, this would trigger the rule

BigDecimal bd = new BigDecimal("1.123");     // preferred approach

BigDecimal bd = new BigDecimal(12);          // preferred approach, ok for integer values

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#donotterminatevm"
         language="java"
         message="System.exit() should not be used in J2EE/JEE apps"
         name="DoNotTerminateVM"
         since="4.1">
      <description>
Web applications should not call `System.exit()`, since only the web container or the
application server should stop the JVM. Otherwise a web application would terminate all other applications
running on the same application server.

This rule also checks for the equivalent calls `Runtime.getRuntime().exit()` and `Runtime.getRuntime().halt()`.

This rule has been renamed from "DoNotCallSystemExit" in PMD 6.29.0.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//(MethodDeclaration[@MainMethod = false()] | Initializer)//MethodCall[
    pmd-java:matchesSig("java.lang.System#exit(int)")
    or pmd-java:matchesSig("java.lang.Runtime#exit(int)")
    or pmd-java:matchesSig("java.lang.Runtime#halt(int)")
]</value>
         </property>
      </properties>
      <example>

public void bar() {
    System.exit(0);                 // never call this when running in an application server!
}
public void foo() {
    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#toomanymethods"
         language="java"
         message="This class has too many methods, consider refactoring it."
         name="TooManyMethods"
         since="4.2">
      <description>
A class with too many methods is probably a good suspect for refactoring, in order to reduce its
complexity and find a way to have more fine grained objects.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration/ClassBody
     [
      count(MethodDeclaration[
         not (
                (starts-with(@Name,'get') or starts-with(@Name,'set') or starts-with(@Name,'is'))
                and
                count(Block/*) &lt;= 1
            )
      ]) &gt; $maxmethods
   ]</value>
         </property>
         <property description="The method count reporting threshold"
                   max="1000"
                   min="1"
                   name="maxmethods"
                   type="Integer">
            <value>10</value>
         </property>
      </properties>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junit4testshouldusebeforeannotation"
         language="java"
         message="JUnit 4 tests that set up tests should use the @Before annotation, JUnit5 tests should use @BeforeEach or @BeforeAll"
         name="JUnit4TestShouldUseBeforeAnnotation"
         since="4.0">
      <description>
In JUnit 3, the setUp method was used to set up all data entities required in running tests.
JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests.
JUnit 5 introduced @BeforeEach and @BeforeAll annotations to execute methods before each test or before all tests in the class, respectively.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name='setUp' and @Arity=0]
    [not(ModifierList/Annotation[
           pmd-java:typeIs('org.junit.Before')
        or pmd-java:typeIs('org.junit.jupiter.api.BeforeEach')
        or pmd-java:typeIs('org.junit.jupiter.api.BeforeAll')
        or pmd-java:typeIs('org.testng.annotations.BeforeMethod')])]
    (: Make sure this is a junit 4 class :)
    [../MethodDeclaration[pmd-java:hasAnnotation('org.junit.Test')]]</value>
         </property>
      </properties>
      <example>

public class MyTest {
    public void setUp() {
        bad();
    }
}
public class MyTest2 {
    @Before public void setUp() {
        good();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessarysemicolon"
         language="java"
         message="Unnecessary semicolon"
         name="UnnecessarySemicolon"
         since="6.46.0">
      <description>
            Reports unnecessary semicolons (so called "empty statements" and "empty declarations").
            These can be removed without changing the program. The Java grammar
            allows them for historical reasons, but they should be avoided.
            
            This rule will not report empty statements that are syntactically 
            required, for instance, because they are the body of a control statement.

            This rule replaces EmptyStatementNotInLoop.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>(: empty declarations :)
      //EmptyDeclaration
      (: empty statements :)
    | //Block/EmptyStatement</value>
         </property>
      </properties>
      <example>

class Foo {
    {
        toString();; // one of these semicolons is unnecessary
        if (true); // this semicolon is not unnecessary, but it could be an empty block instead (not reported)
    }
}; // this semicolon is unnecessary


        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.ForLoopCanBeForeachRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#forloopcanbeforeach"
         language="java"
         message="This 'for' loop can be replaced by a 'foreach' loop"
         minimumLanguageVersion="1.5"
         name="ForLoopCanBeForeach"
         since="6.0.0">
      <description>
Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over
lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to
access an element of the list or array, only has one update statement, and loops through *every*
element of the list or array left to right.
        </description>
      <priority>3</priority>
      <example>

public class MyClass {
  void loop(List&lt;String&gt; l) {
    for (int i = 0; i &lt; l.size(); i++) { // pre Java 1.5
      System.out.println(l.get(i));
    }

    for (String s : l) {        // post Java 1.5
      System.out.println(s);
    }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junit4testshoulduseafterannotation"
         language="java"
         message="JUnit 4 tests that clean up tests should use the @After annotation, JUnit5 tests should use @AfterEach or @AfterAll"
         name="JUnit4TestShouldUseAfterAnnotation"
         since="4.0">
      <description>
In JUnit 3, the tearDown method was used to clean up all data entities required in running tests.
JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test.
JUnit 5 introduced @AfterEach and @AfterAll annotations to execute methods after each test or after all tests in the class, respectively.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name='tearDown' and @Arity=0]
    [not(ModifierList/Annotation[
           pmd-java:typeIs('org.junit.After')
        or pmd-java:typeIs('org.junit.jupiter.api.AfterEach')
        or pmd-java:typeIs('org.junit.jupiter.api.AfterAll')
        or pmd-java:typeIs('org.testng.annotations.AfterMethod')])]
    (: Make sure this is a junit 4 class :)
    [../MethodDeclaration[pmd-java:hasAnnotation('org.junit.Test')]]</value>
         </property>
      </properties>
      <example>

public class MyTest {
    public void tearDown() {
        bad();
    }
}
public class MyTest2 {
    @After public void tearDown() {
        good();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables"
         language="java"
         message="Avoid reassigning the loop control variable ''{0}''"
         name="AvoidReassigningLoopVariables"
         since="6.11.0">
      <description>
Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed.

In foreach-loops, configured by the `foreachReassign` property:
- `deny`: Report any reassignment of the loop variable in the loop body. _This is the default._
- `allow`: Don't check the loop variable.
- `firstOnly`: Report any reassignments of the loop variable, except as the first statement in the loop body.
            _This is useful if some kind of normalization or clean-up of the value before using is permitted, but any other change of the variable is not._

In for-loops, configured by the `forReassign` property:
- `deny`: Report any reassignment of the control variable in the loop body. _This is the default._
- `allow`: Don't check the control variable.
- `skip`: Report any reassignments of the control variable, except conditional increments/decrements (`++`, `--`, `+=`, `-=`).
            _This prevents accidental reassignments or unconditional increments of the control variable._
        </description>
      <priority>3</priority>
      <example>

public class Foo {
  private void foo() {
    for (String s : listOfStrings()) {
      s = s.trim(); // OK, when foreachReassign is "firstOnly" or "allow"
      doSomethingWith(s);

      s = s.toUpper(); // OK, when foreachReassign is "allow"
      doSomethingElseWith(s);
    }

    for (int i=0; i &lt; 10; i++) {
      if (check(i)) {
        i++; // OK, when forReassign is "skip" or "allow"
      }

      i = 5;  // OK, when forReassign is "allow"

      doSomethingWith(i);
    }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AvoidThrowingNullPointerExceptionRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#avoidthrowingnullpointerexception"
         language="java"
         message="Avoid throwing null pointer exceptions."
         name="AvoidThrowingNullPointerException"
         since="1.8">
      <description>

Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the
virtual machine threw it.  To avoid a method being called with a null parameter, you may consider
using an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception.
However, there are better ways to handle this:

&gt;*Effective Java, 3rd Edition, Item 72: Favor the use of standard exceptions*
&gt;
&gt;Arguably, every erroneous method invocation boils down to an illegal argument or state,
but other exceptions are standardly used for certain kinds of illegal arguments and states.
If a caller passes null in some parameter for which null values are prohibited, convention dictates that
NullPointerException be thrown rather than IllegalArgumentException.

To implement that, you are encouraged to use `java.util.Objects.requireNonNull()`
(introduced in Java 1.7). This method is designed primarily for doing parameter
validation in methods and constructors with multiple parameters.

Your parameter validation could thus look like the following:
```
public class Foo {
    private String exampleValue;

    void setExampleValue(String exampleValue) {
      // check, throw and assignment in a single standard call
      this.exampleValue = Objects.requireNonNull(exampleValue, "exampleValue must not be null!");
    }
  }
```

        </description>
      <priority>1</priority>
      <example>

public class Foo {
    void bar() {
        throw new NullPointerException();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#avoidusingvolatile"
         language="java"
         message="Use of modifier volatile is not recommended."
         name="AvoidUsingVolatile"
         since="4.1">
      <description>
Use of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires
a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,
the volatile keyword should not be used for maintenance purpose and portability.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration[pmd-java:modifiers() = "volatile"]</value>
         </property>
      </properties>
      <example>

public class ThrDeux {
  private volatile String var1; // not suggested
  private          String var2; // preferred
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#mutablestaticstate"
         language="java"
         message="Do not use non-final non-private static fields"
         name="MutableStaticState"
         since="6.35.0">
      <description>
Non-private static fields should be made constants (or immutable references) by
declaring them final.

Non-private non-final static fields break encapsulation and can lead to hard to find
bugs, since these fields can be modified from anywhere within the program.
Callers can trivially access and modify non-private non-final static fields. Neither
accesses nor modifications can be guarded against, and newly set values cannot
be validated.

If you are using this rule, then you don't need this
rule {% rule java/errorprone/AssignmentToNonFinalStatic %}.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration[pmd-java:modifiers() = "static"][not(pmd-java:modifiers() = ("private", "final"))]</value>
         </property>
      </properties>
      <example>
            
public class Greeter { public static Foo foo = new Foo(); ... }       // avoid this
public class Greeter { public static final Foo FOO = new Foo(); ... } // use this instead

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#simplifiedternary"
         language="java"
         message="This conditional expression can be simplified with || or &amp;&amp;"
         name="SimplifiedTernary"
         since="5.4.0">
      <description>

Reports ternary expression with the form `condition ? literalBoolean : foo`
or `condition ? foo : literalBoolean`.

These expressions can be simplified as follows:
* `condition ? true : expr` simplifies to `condition || expr`
* `condition ? false : expr` simplifies to `!condition &amp;&amp; expr`
* `condition ? expr : true` simplifies to `!condition || expr`
* `condition ? expr : false` simplifies to `condition &amp;&amp; expr`

        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ConditionalExpression[BooleanLiteral and not(NullLiteral)]</value>
         </property>
      </properties>
      <example>

public class Foo {
    public boolean test() {
        return condition ? true : something(); // can be as simple as return condition || something();
    }

    public void test2() {
        final boolean value = condition ? false : something(); // can be as simple as value = !condition &amp;&amp; something();
    }

    public boolean test3() {
        return condition ? something() : true; // can be as simple as return !condition || something();
    }

    public void test4() {
        final boolean otherValue = condition ? something() : false; // can be as simple as condition &amp;&amp; something();
    }

    public boolean test5() {
        return condition ? true : false; // can be as simple as return condition;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.AssignmentInOperandRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#assignmentinoperand"
         language="java"
         message="Avoid assignments in operands"
         name="AssignmentInOperand"
         since="1.03">
      <description>
Avoid assignments in operands; this can make code more complicated and harder to read.
        </description>
      <priority>3</priority>
      <example>

public void bar() {
    int x = 2;
    if ((x = getX()) == 3) {
      System.out.println("3!");
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#usevarargs"
         language="java"
         message="Consider using varargs for methods or constructors which take an array the last parameter."
         minimumLanguageVersion="1.5"
         name="UseVarargs"
         since="5.0">
      <description>
Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic
sugar provides flexibility for users of these methods and constructors, allowing them to avoid
having to deal with the creation of an array.

Byte arrays in any method and String arrays in `public static void main(String[])` methods are ignored.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//FormalParameters[not(parent::MethodDeclaration[@Overridden=true() or @MainMethod=true()])]
  /FormalParameter[position()=last()]
   [@Varargs=false()]
   [ArrayType[not(PrimitiveType[@Kind = "byte"] or ClassType[pmd-java:typeIs('java.lang.Byte')])]
    or VariableId[ArrayDimensions] and (PrimitiveType[not(@Kind="byte")] or ClassType[not(pmd-java:typeIs('java.lang.Byte'))])]</value>
         </property>
      </properties>
      <example>

public class Foo {
    public void foo(String s, Object[] args) {
        // Do something here...
    }

    public void bar(String s, Object... args) {
        // Ahh, varargs tastes much better...
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#donothardcodesdcard"
         language="java"
         message="Do not hardcode /sdcard."
         name="DoNotHardCodeSDCard"
         since="4.2.6">
      <description>
Use Environment.getExternalStorageDirectory() instead of "/sdcard"
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//StringLiteral[starts-with(@Image,'"/sdcard')]</value>
         </property>
      </properties>
      <example>

public class MyActivity extends Activity {
    protected void foo() {
        String storageLocation = "/sdcard/mypackage";   // hard-coded, poor approach

       storageLocation = Environment.getExternalStorageDirectory() + "/mypackage"; // preferred approach
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#noncaselabelinswitchstatement"
         language="java"
         message="A non-case label was present in a switch statement"
         name="NonCaseLabelInSwitchStatement"
         since="1.5">
      <description>
A non-case label (e.g. a named break/continue label) was present in a switch statement.
This is legal, but confusing. It is easy to mix up the case labels and the non-case labels.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//SwitchStatement//LabeledStatement</value>
         </property>
      </properties>
      <example>

public class Foo {
  void bar(int a) {
   switch (a) {
     case 1:
       // do something
       break;
     mylabel: // this is legal, but confusing!
       break;
     default:
       break;
    }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.CouplingBetweenObjectsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#couplingbetweenobjects"
         language="java"
         message="High amount of different objects as members denotes a high coupling"
         name="CouplingBetweenObjects"
         since="1.04">
      <description>
This rule counts the number of unique attributes, local variables, and return types within an object.
A number higher than the specified threshold can indicate a high degree of coupling.
        </description>
      <priority>3</priority>
      <example>

import com.Blah;
import org.Bar;
import org.Bardo;

public class Foo {
    private Blah var1;
    private Bar var2;

    //followed by many imports of unique objects
    ObjectC doWork() {
        Bardo var55;
        ObjectA var44;
        ObjectZ var93;
        return something();
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.PrimitiveWrapperInstantiationRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#primitivewrapperinstantiation"
         language="java"
         message="Do not use `new {0}(...)`, prefer `{0}.valueOf(...)`"
         name="PrimitiveWrapperInstantiation"
         since="6.37.0">
      <description>
            Reports usages of primitive wrapper constructors. They are deprecated
            since Java 9 and should not be used. Even before Java 9, they can
            be replaced with usage of the corresponding static `valueOf` factory method
            (which may be automatically inserted by the compiler since Java 1.5).
            This has the advantage that it may reuse common instances instead of creating
            a new instance each time.

            Note that for `Boolean`, the named constants `Boolean.TRUE` and `Boolean.FALSE`
            are preferred instead of `Boolean.valueOf`.
        </description>
      <priority>3</priority>
      <example>

            public class Foo {
                private Integer ZERO = new Integer(0);      // violation
                private Integer ZERO1 = Integer.valueOf(0); // better
                private Integer ZERO1 = 0;                  // even better
            }
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_codestyle.html#unnecessaryparentheses"
         language="ecmascript"
         message="Unnecessary parentheses."
         name="UnnecessaryParentheses"
         since="5.0">
      <description>Unnecessary parentheses should be removed.</description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ParenthesizedExpression/ParenthesizedExpression</value>
         </property>
      </properties>
      <example>

var x = 1; // Ok
var y = (1 + 1); // Ok
var z = ((1 + 1)); // Bad

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#longvariable"
         language="java"
         message="Avoid excessively long variable names like {0}"
         name="LongVariable"
         since="0.3">
      <description>
Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//VariableId[string-length(@Name) &gt; $minimum]</value>
         </property>
         <property description="The variable length reporting threshold"
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer">
            <value>17</value>
         </property>
      </properties>
      <example>

public class Something {
    int reallyLongIntName = -3;             // VIOLATION - Field
    public static void main( String argumentsList[] ) { // VIOLATION - Formal
        int otherReallyLongName = -5;       // VIOLATION - Local
        for (int interestingIntIndex = 0;   // VIOLATION - For
             interestingIntIndex &lt; 10;
             interestingIntIndex ++ ) {
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.NcssCountRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#ncsscount"
         language="java"
         message="The {0} ''{1}'' has a NCSS line count of {2}."
         name="NcssCount"
         since="6.0.0">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines
of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual
statements. For more details on the calculation, see the documentation
{% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.
        </description>
      <priority>3</priority>
      <example>

import java.util.Collections;       // +0
import java.io.IOException;         // +0

class Foo {                         // +1, total Ncss = 12

  public void bigMethod()           // +1
      throws IOException {
    int x = 0, y = 2;               // +1
    boolean a = false, b = true;    // +1

    if (a || b) {                   // +1
      try {                         // +1
        do {                        // +1
          x += 2;                   // +1
        } while (x &lt; 12);

        System.exit(0);             // +1
      } catch (IOException ioe) {   // +1
        throw new PatheticFailException(ioe); // +1
      }
    } else {
      assert false;                 // +1
    }
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.AvoidUsingOctalValuesRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidusingoctalvalues"
         language="java"
         message="Do not start a literal by 0 unless it's an octal value"
         name="AvoidUsingOctalValues"
         since="3.9">
      <description>
Integer literals should not start with zero since this denotes that the rest of literal will be
interpreted as an octal value.
        </description>
      <priority>3</priority>
      <example>

int i = 012;    // set i with 10 not 12
int j = 010;    // set j with 8 not 10
k = i * j;      // set k with 80 not 120

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass"
         language="java"
         message="Avoid protected fields in a final class.  Change to private or package access."
         name="AvoidProtectedFieldInFinalClass"
         since="2.1">
      <description>
Do not use protected fields in final classes since they cannot be subclassed.
Clarify your intent by using private or package access modifiers instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[@Final = true()]
/ClassBody
/FieldDeclaration[@Visibility = "protected"]</value>
         </property>
      </properties>
      <example>

public final class Bar {
  private int x;
  protected int y;  // bar cannot be subclassed, so is y really private or package visible?
  Bar() {}
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#replaceenumerationwithiterator"
         language="java"
         message="Consider replacing this Enumeration with the newer java.util.Iterator"
         name="ReplaceEnumerationWithIterator"
         since="3.4">
      <description>
Consider replacing Enumeration usages with the newer java.util.Iterator
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ImplementsList/ClassType[pmd-java:typeIsExactly('java.util.Enumeration')]</value>
         </property>
      </properties>
      <example>

public class Foo implements Enumeration {
    private int x = 42;
    public boolean hasMoreElements() {
        return true;
    }
    public Object nextElement() {
        return String.valueOf(i++);
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#nonstaticinitializer"
         language="java"
         message="Non-static initializers are confusing"
         name="NonStaticInitializer"
         since="1.5">
      <description>
A non-static initializer block will be called any time a constructor is invoked (just prior to
invoking the constructor).  While this is a valid language construct, it is rarely used and is
confusing.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//Initializer[@Static=false()][not(ancestor::*[3][self::ConstructorCall or self::EnumConstant])]</value>
         </property>
      </properties>
      <example>

public class MyClass {
  // this block gets run before any call to a constructor
  {
    System.out.println("I am about to construct myself");
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessaryannotationvalueelement"
         language="java"
         message="Avoid the use of value in annotations when it's the only element"
         name="UnnecessaryAnnotationValueElement"
         since="6.2.0">
      <description>
            Avoid the use of value in annotations when it's the only element.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//Annotation/AnnotationMemberList[count(*) = 1 and MemberValuePair[@Shorthand = false() and @Name = 'value']]</value>
         </property>
         <property description="If disabled, the rule shows also violations that are applicable for java8+"
                   name="java7Compatibility"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
      <example>
            
@TestClassAnnotation(value = "TEST")
public class Foo {

    @TestMemberAnnotation(value = "TEST")
    private String y;

    @TestMethodAnnotation(value = "TEST")
    public void bar() {
        int x = 42;
        return;
    }
}

// should be

@TestClassAnnotation("TEST")
public class Foo {

    @TestMemberAnnotation("TEST")
    private String y;

    @TestMethodAnnotation("TEST")
    public void bar() {
        int x = 42;
        return;
    }
}


        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.InvalidLogMessageFormatRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#invalidlogmessageformat"
         language="java"
         message="Invalid message format"
         name="InvalidLogMessageFormat"
         since="5.5.0">
      <description>
Check for messages in slf4j and log4j2 (since 6.19.0) loggers with non matching number of arguments and placeholders.

Since 6.32.0 in addition to parameterized message placeholders (`{}`) also format specifiers of string formatted
messages are supported (`%s`).

This rule has been renamed from "InvalidSlf4jMessageFormat" in PMD 6.19.0.
        </description>
      <priority>5</priority>
      <example>

LOGGER.error("forget the arg {}");
LOGGER.error("forget the arg %s");
LOGGER.error("too many args {}", "arg1", "arg2");
LOGGER.error("param {}", "arg1", new IllegalStateException("arg")); //The exception is shown separately, so is correct.

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#suspiciousequalsmethodname"
         language="java"
         message="The method name and parameter number are suspiciously close to equals(Object)"
         name="SuspiciousEqualsMethodName"
         since="2.0">
      <description>
The method name and parameter number are suspiciously close to `Object.equals`, which can denote an
intention to override it. However, the method does not override `Object.equals`, but overloads it instead.
Overloading `Object.equals` method is confusing for other programmers, error-prone and hard to maintain,
especially when using inheritance, because `@Override` annotations used in subclasses can provide a false
sense of security. For more information on `Object.equals` method, see Effective Java, 3rd Edition,
Item 10: Obey the general contract when overriding equals.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name = 'equals'][
    (@Arity = 1
     and not(FormalParameters/FormalParameter[pmd-java:typeIsExactly('java.lang.Object')])
     or not(PrimitiveType[@Kind = 'boolean'])
    ) or (
     @Arity = 2
     and PrimitiveType[@Kind = 'boolean']
     and FormalParameters/FormalParameter[pmd-java:typeIsExactly('java.lang.Object')]
     and not(pmd-java:hasAnnotation('java.lang.Override'))
    )
]
| //MethodDeclaration[@Name = 'equal'][
    @Arity = 1
    and FormalParameters/FormalParameter[pmd-java:typeIsExactly('java.lang.Object')]
]</value>
         </property>
      </properties>
      <example>

public class Foo {
   public int equals(Object o) {
     // oops, this probably was supposed to be boolean equals
   }
   public boolean equals(String s) {
     // oops, this probably was supposed to be equals(Object)
   }
   public boolean equals(Object o1, Object o2) {
     // oops, this probably was supposed to be equals(Object)
   }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#extendsobject"
         language="java"
         message="No need to explicitly extend Object."
         name="ExtendsObject"
         since="5.0">
      <description>No need to explicitly extend Object.</description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//ExtendsList/ClassType[pmd-java:typeIsExactly('java.lang.Object')]</value>
         </property>
      </properties>
      <example>

public class Foo extends Object {     // not required
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.JUnitTestsShouldIncludeAssertRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junittestsshouldincludeassert"
         language="java"
         message="JUnit tests should include assert() or fail()"
         name="JUnitTestsShouldIncludeAssert"
         since="2.0">
      <description>
JUnit tests should include at least one assertion.  This makes the tests more robust, and using assert
with messages provide the developer a clearer idea of what the test does.
        </description>
      <priority>3</priority>
      <example>

public class Foo extends TestCase {
   public void testSomething() {
      Bar b = findBar();
   // This is better than having a NullPointerException
   // assertNotNull("bar not found", b);
   b.work();
   }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorClassGenerationRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#accessorclassgeneration"
         language="java"
         maximumLanguageVersion="10"
         message="Avoid instantiation through private constructors from outside of the constructor's class."
         name="AccessorClassGeneration"
         since="1.04">
      <description>
Instantiation by way of private constructors from outside the constructor's class often causes the
generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this
situation. The generated class file is actually an interface.  It gives the accessing class the ability
to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter.
This turns a private constructor effectively into one with package scope, and is challenging to discern.

_Note:_ This rule is only executed for Java 10 or lower.
Since Java 11, [JEP 181: Nest-Based Access Control](https://openjdk.org/jeps/181) has been implemented. This
means that in Java 11 and above accessor classes are not generated anymore.
        </description>
      <priority>3</priority>
      <example>

public class Outer {
 void method(){
  Inner ic = new Inner();//Causes generation of accessor class
 }
 public class Inner {
  private Inner(){}
 }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.CheckResultSetRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#checkresultset"
         language="java"
         message="Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet."
         name="CheckResultSet"
         since="4.1">
      <description>
Always check the return values of navigation methods (next, previous, first, last) of a ResultSet.
If the value return is 'false', it should be handled properly.
        </description>
      <priority>3</priority>
      <example>

Statement stat = conn.createStatement();
ResultSet rst = stat.executeQuery("SELECT name FROM person");
rst.next();     // what if it returns false? bad form
String firstName = rst.getString(1);

Statement stat = conn.createStatement();
ResultSet rst = stat.executeQuery("SELECT name FROM person");
if (rst.next()) {    // result is properly examined and used
    String firstName = rst.getString(1);
    } else  {
        // handle missing data
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.NonSerializableClassRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#nonserializableclass"
         language="java"
         message="The field ''{0}'' of serializable class ''{1}'' is of non-serializable type ''{2}''."
         name="NonSerializableClass"
         since="1.1">
      <description>
If a class is marked as `Serializable`, then all fields need to be serializable as well. In order to exclude
a field, it can be marked as transient. Static fields are not considered.

This rule reports all fields, that are not serializable.

If a class implements the methods to perform manual serialization (`writeObject`, `readObject`) or uses
a replacement object (`writeReplace`, `readResolve`) then this class is ignored.

Note: This rule has been revamped with PMD 6.52.0. It was previously called "BeanMembersShouldSerialize".
The property `prefix` has been deprecated, since in a serializable class all fields have to be
serializable regardless of the name.
        </description>
      <priority>3</priority>
      <example>
            
class Buzz implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private transient int someFoo;          // good, it's transient
    private static int otherFoo;            // also OK, it's static
    private java.io.FileInputStream stream; // bad - FileInputStream is not serializable

    public void setStream(FileInputStream stream) {
        this.stream = stream;
    }

    public int getSomeFoo() {
          return this.someFoo;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel"
         language="java"
         message="Use block level rather than method level synchronization"
         name="AvoidSynchronizedAtMethodLevel"
         since="3.0">
      <description>
Method-level synchronization can cause problems when new code is added to the method.
Block-level synchronization helps to ensure that only the code that needs synchronization
gets it.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[pmd-java:modifiers() = "synchronized"]</value>
         </property>
      </properties>
      <example>

public class Foo {
    // Try to avoid this:
    synchronized void foo() {
        // code, that doesn't need synchronization
        // ...
        // code, that requires synchronization
        if (!sharedData.has("bar")) {
            sharedData.add("bar");
        }
        // more code, that doesn't need synchronization
        // ...
    }
    // Prefer this:
    void bar() {
        // code, that doesn't need synchronization
        // ...
        synchronized(this) {
            if (!sharedData.has("bar")) {
                sharedData.add("bar");
            }
        }
        // more code, that doesn't need synchronization
        // ...
    }

    // Try to avoid this for static methods:
    static synchronized void fooStatic() {
    }

    // Prefer this:
    static void barStatic() {
        // code, that doesn't need synchronization
        // ...
        synchronized(Foo.class) {
            // code, that requires synchronization
        }
        // more code, that doesn't need synchronization
        // ...
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#unnecessarybooleanassertion"
         language="java"
         message="assertTrue(true) or similar statements are unnecessary"
         name="UnnecessaryBooleanAssertion"
         since="3.0">
      <description>
A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing.
Consider using flow control (in case of `assertTrue(false)` or similar) or simply removing
statements like `assertTrue(true)` and `assertFalse(false)`. If you just want a test to halt after finding
an error, use the `fail()` method and provide an indication message of why it did.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration
    [pmd-java:typeIs('junit.framework.TestCase')
     or .//Annotation[pmd-java:typeIs('org.junit.Test')
                   or pmd-java:typeIs('org.junit.jupiter.api.Test')
                   or pmd-java:typeIs('org.junit.jupiter.api.RepeatedTest')
                   or pmd-java:typeIs('org.junit.jupiter.api.TestFactory')
                   or pmd-java:typeIs('org.junit.jupiter.api.TestTemplate')
                   or pmd-java:typeIs('org.junit.jupiter.params.ParameterizedTest')
     ]
    ]
    //MethodCall[@MethodName = ('assertTrue', 'assertFalse')]
        [ArgumentList
            [
                BooleanLiteral or
                UnaryExpression[@Operator = '!'][BooleanLiteral]
            ]
        ]</value>
         </property>
      </properties>
      <example>

public class SimpleTest extends TestCase {
    public void testX() {
        assertTrue(true);            // serves no real purpose - remove it
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryReturnRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessaryreturn"
         language="java"
         message="Unnecessary return statement"
         name="UnnecessaryReturn"
         since="1.3">
      <description>
Avoid the use of unnecessary return statements. A return is unnecessary when no
instructions follow anyway.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void bar() {
        int x = 42;
        return;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#booleangetmethodname"
         language="java"
         message="A 'getX()' method which returns a boolean should be named 'isX()'"
         name="BooleanGetMethodName"
         since="4.0">
      <description>
Methods that return boolean results should be named as predicate statements to denote this.
I.e, 'isReady()', 'hasValues()', 'canCommit()', 'willFail()', etc.   Avoid the use of the 'get'
prefix for these methods.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration
    [starts-with(@Name, 'get')]
    [@Arity = 0 or $checkParameterizedMethods = true()]
    [ PrimitiveType[@Kind = 'boolean'] and @Overridden = false() ]</value>
         </property>
         <property description="Check parameterized methods"
                   name="checkParameterizedMethods"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
      <example>

public boolean getFoo();            // bad
public boolean isFoo();             // ok
public boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.security.HardCodedCryptoKeyRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_security.html#hardcodedcryptokey"
         language="java"
         message="Do not use hard coded encryption keys"
         name="HardCodedCryptoKey"
         since="6.4.0">
      <description>
Do not use hard coded values for cryptographic operations. Please store keys outside of source code.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    void good() {
        SecretKeySpec secretKeySpec = new SecretKeySpec(Properties.getKey(), "AES");
    }

    void bad() {
        SecretKeySpec secretKeySpec = new SecretKeySpec("my secret here".getBytes(), "AES");
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#simplifybooleanexpressions"
         language="java"
         message="Avoid unnecessary comparisons in boolean expressions"
         name="SimplifyBooleanExpressions"
         since="1.05">
      <description>
Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression[@Operator = ("==", "!=")]/BooleanLiteral</value>
         </property>
      </properties>
      <example>

public class Bar {
  // can be simplified to
  // bar = isFoo();
  private boolean bar = (isFoo() == true);

  public isFoo() { return false;}
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.ecmascript.rule.bestpractices.ConsistentReturnRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_bestpractices.html#consistentreturn"
         language="ecmascript"
         message="A function should not mix 'return' statements with and without a result."
         name="ConsistentReturn"
         since="5.0">
      <description>
ECMAScript does provide for return types on functions, and therefore there is no solid rule as to their usage.
However, when a function does use returns they should all have a value, or all with no value.  Mixed return
usage is likely a bug, or at best poor style.
        </description>
      <priority>2</priority>
      <example>

// Ok
function foo() {
    if (condition1) {
        return true;
    }
    return false;
}

// Bad
function bar() {
    if (condition1) {
        return;
    }
    return false;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedPrivateMethodRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#unusedprivatemethod"
         language="java"
         message="Avoid unused private methods such as ''{0}''."
         name="UnusedPrivateMethod"
         since="0.7">
      <description>
Unused Private Method detects when a private method is declared but is unused.
        </description>
      <priority>3</priority>
      <example>

public class Something {
    private void foo() {} // unused
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#junit4suitesshouldusesuiteannotation"
         language="java"
         message="JUnit 4 indicates test suites via annotations, not the suite method."
         name="JUnit4SuitesShouldUseSuiteAnnotation"
         since="4.0">
      <description>
In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated
through the @RunWith(Suite.class) annotation.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name='suite' and ClassType[pmd-java:typeIs('junit.framework.Test')]]
                   [not(.//ReturnStatement/*[pmd-java:typeIs('junit.framework.JUnit4TestAdapter')])]</value>
         </property>
      </properties>
      <example>

public class BadExample extends TestCase{

    public static Test suite(){
        return new Suite();
    }
}

@RunWith(Suite.class)
@SuiteClasses( { TestOne.class, TestTwo.class })
public class GoodTest {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.EmptyControlStatementRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#emptycontrolstatement"
         language="java"
         message="This control statement has an empty branch"
         name="EmptyControlStatement"
         since="6.46.0">
      <description>
            Reports control statements whose body is empty, as well as empty initializers.

            The checked code constructs are the following:
            - bodies of `try` statements
            - `finally` clauses of `try` statements
            - `switch` statements
            - `synchronized` statements
            - `if` statements
            - loop statements: `while`, `for`, `do .. while`
            - initializers
            - blocks used as statements (for scoping)

            This rule replaces the rules EmptyFinallyBlock, 
            EmptyIfStmt, EmptyInitializer, EmptyStatementBlock, 
            EmptySwitchStatements, EmptySynchronizedBlock, EmptyTryBlock, and EmptyWhileStmt.

            Notice that {% rule java/errorprone/EmptyCatchBlock %} is still an independent rule.

            EmptyStatementNotInLoop is replaced by {% rule java/codestyle/UnnecessarySemicolon %}.
        </description>
      <priority>3</priority>
      <example>

class Foo {
    {
        if (true); // empty if statement
        if (true) { // empty as well
        }
    }

    {} // empty initializer
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#donotextendjavalangthrowable"
         language="java"
         message="Exceptions should not extend java.lang.Throwable"
         name="DoNotExtendJavaLangThrowable"
         since="6.0.0">
      <description>
Extend Exception or RuntimeException instead of Throwable.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration/ExtendsList/ClassType
  [pmd-java:typeIsExactly('java.lang.Throwable')]</value>
         </property>
      </properties>
      <example>

public class Foo extends Throwable { }

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.CloneMethodMustImplementCloneableRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#clonemethodmustimplementcloneable"
         language="java"
         message="clone() method should be implemented only if implementing Cloneable interface"
         name="CloneMethodMustImplementCloneable"
         since="1.9">
      <description>
The method clone() should only be implemented if the class implements the Cloneable interface with the exception of
a final method that only throws CloneNotSupportedException.

The rule can also detect, if the class implements or extends a Cloneable class.
        </description>
      <priority>3</priority>
      <example>

public class MyClass {
 public Object clone() throws CloneNotSupportedException {
  return foo;
 }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.GodClassRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#godclass"
         language="java"
         message="Possible God Class (WMC={0}, ATFD={2}, TCC={1})"
         name="GodClass"
         since="5.0">
      <description>
The God Class rule detects the God Class design flaw using metrics. God classes do too many things,
are very big and overly complex. They should be split apart to be more object-oriented.
The rule uses the detection strategy described in "Object-Oriented Metrics in Practice".
The violations are reported against the entire class.

The rule uses metrics to implement its detection strategy. The violation message
gives information about the values of these metrics:
* WMC: a class complexity measure, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %}
* ATFD: a measure of how much data external data the class uses, see {% jdoc java::lang.java.metrics.JavaMetrics#ACCESS_TO_FOREIGN_DATA %}
* TCC: a measure of how tightly related the methods are, see {% jdoc java::lang.java.metrics.JavaMetrics#TIGHT_CLASS_COHESION %}

The rule identifies a god class by looking for classes which have all of the following properties:
* High WMC
* High ATFD
* Low TCC

See also the reference:

Michele Lanza and Radu Marinescu. *Object-Oriented Metrics in Practice:
Using Software Metrics to Characterize, Evaluate, and Improve the Design
of Object-Oriented Systems.* Springer, Berlin, 1 edition, October 2006. Page 80.
        </description>
      <priority>3</priority>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_errorprone.html#innaccuratenumericliteral"
         language="ecmascript"
         message="The numeric literal ''{0}'' will have at different value at runtime."
         name="InnaccurateNumericLiteral"
         since="5.0">
      <description>
The numeric literal will have a different value at runtime, which can happen if you provide too much
precision in a floating point number.  This may result in numeric calculations being in error.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//NumberLiteral[@NormalizedImage != string(@Number)]</value>
         </property>
      </properties>
      <example>

var a = 9; // Ok
var b = 999999999999999; // Ok
var c = 999999999999999999999; // Not good
var w = 1.12e-4; // Ok
var x = 1.12; // Ok
var y = 1.1234567890123; // Ok
var z = 1.12345678901234567; // Not good

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_bestpractices.html#scopeforinvariable"
         language="ecmascript"
         message="The for-in loop variable ''{0}'' should be explicitly scoped with 'var' to avoid pollution."
         name="ScopeForInVariable"
         since="5.0">
      <description>
A for-in loop in which the variable name is not explicitly scoped to the enclosing scope with the 'var' keyword can
refer to a variable in an enclosing scope outside the nearest enclosing scope.  This will overwrite the
existing value of the variable in the outer scope when the body of the for-in is evaluated.  When the for-in loop
has finished, the variable will contain the last value used in the for-in, and the original value from before
the for-in loop will be gone.  Since the for-in variable name is most likely intended to be a temporary name, it
is better to explicitly scope the variable name to the nearest enclosing scope with 'var'.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//ForInLoop[not(child::VariableDeclaration)]/Name[1]</value>
         </property>
      </properties>
      <example>

// Ok
function foo() {
    var p = 'clean';
    function() {
        var obj = { dirty: 'dirty' };
        for (var p in obj) { // Use 'var' here.
            obj[p] = obj[p];
        }
        return x;
    }();

    // 'p' still has value of 'clean'.
}
// Bad
function bar() {
    var p = 'clean';
    function() {
        var obj = { dirty: 'dirty' };
        for (p in obj) { // Oh no, missing 'var' here!
            obj[p] = obj[p];
        }
        return x;
    }();

    // 'p' is trashed and has value of 'dirty'!
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ExceptionAsFlowControlRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#exceptionasflowcontrol"
         language="java"
         message="Exception thrown at line {0} is caught in this block."
         name="ExceptionAsFlowControl"
         since="1.8">
      <description>
This rule reports exceptions thrown and caught in an enclosing try statement.
This use of exceptions as a form of `goto` statement is discouraged, as that may
hide actual exceptions, and obscures control flow, especially when debugging.
To fix a violation, add the necessary validation or use an alternate control structure.
        </description>
      <priority>3</priority>
      <example>

public void bar() {
    try {
        try {
        } catch (Exception e) {
            throw new WrapperException(e);
            // this is essentially a GOTO to the WrapperException catch block
        }
    } catch (WrapperException e) {
        // do some more stuff
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#dontcallthreadrun"
         language="java"
         message="Don't call Thread.run() explicitly, use Thread.start()"
         name="DontCallThreadRun"
         since="4.3">
      <description>
Explicitly calling Thread.run() method will execute in the caller's thread of control.  Instead, call Thread.start() for the intended behavior.
        </description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[ pmd-java:matchesSig("java.lang.Thread#run()") ]</value>
         </property>
      </properties>
      <example>

Thread t = new Thread();
t.run();            // use t.start() instead
new Thread().run(); // same violation

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#clonemethodmustbepublic"
         language="java"
         message="clone() method must be public if the class implements Cloneable"
         name="CloneMethodMustBePublic"
         since="5.4.0">
      <description>
The java manual says "By convention, classes that implement this interface should override
Object.clone (which is protected) with a public method."
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[not(pmd-java:modifiers() = "public")]
    [@Name = 'clone']
    [@Arity = 0]</value>
         </property>
      </properties>
      <example>

public class Foo implements Cloneable {
    @Override
    protected Object clone() throws CloneNotSupportedException { // Violation, must be public
    }
}

public class Foo implements Cloneable {
    @Override
    protected Foo clone() { // Violation, must be public
    }
}

public class Foo implements Cloneable {
    @Override
    public Object clone() // Ok
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#forloopvariablecount"
         language="java"
         message="Too many control variables in the 'for' statement"
         name="ForLoopVariableCount"
         since="6.11.0">
      <description>
Having a lot of control variables in a 'for' loop makes it harder to see what range of values
the loop iterates over. By default this rule allows a regular 'for' loop with only one variable.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ForInit/LocalVariableDeclaration[count(VariableDeclarator) &gt; $maximumVariables]</value>
         </property>
         <property description="A regular for statement will have 1 control variable"
                   max="100"
                   min="0"
                   name="maximumVariables"
                   type="Integer">
            <value>1</value>
         </property>
      </properties>
      <example>

// this will be reported with the default setting of at most one control variable in a for loop
for (int i = 0, j = 0; i &lt; 10; i++, j += 2) {
   foo();

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#useproperclassloader"
         language="java"
         message="In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead."
         name="UseProperClassLoader"
         since="3.7">
      <description>
In J2EE, the getClassLoader() method might not work as expected. Use
Thread.currentThread().getContextClassLoader() instead.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[pmd-java:matchesSig("java.lang.Class#getClassLoader()")]</value>
         </property>
      </properties>
      <example>

public class Foo {
    ClassLoader cl = Bar.class.getClassLoader();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractClassWithoutAbstractMethodRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod"
         language="java"
         message="This abstract class does not have any abstract methods"
         name="AbstractClassWithoutAbstractMethod"
         since="3.0">
      <description>
The abstract class does not contain any abstract methods. An abstract class suggests
an incomplete implementation, which is to be completed by subclasses implementing the
abstract methods. If the class is intended to be used as a base class only (not to be instantiated
directly) a protected constructor can be provided to prevent direct instantiation.
        </description>
      <priority>3</priority>
      <example>

public abstract class Foo {
  void int method1() { ... }
  void int method2() { ... }
  // consider using abstract methods or removing
  // the abstract modifier and adding protected constructors
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#nopackage"
         language="java"
         message="All classes, interfaces, enums and annotations must belong to a named package"
         name="NoPackage"
         since="3.3">
      <description>
Detects when a class, interface, enum or annotation does not have a package definition.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>/CompilationUnit[not(PackageDeclaration)]/*[pmd-java:nodeIs("TypeDeclaration")][1]</value>
         </property>
      </properties>
      <example>

// no package declaration
public class ClassInDefaultPackage {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_documentation.html#uncommentedemptyconstructor"
         language="java"
         message="Document empty constructor"
         name="UncommentedEmptyConstructor"
         since="3.4">
      <description>
Uncommented Empty Constructor finds instances where a constructor does not
contain statements, but there is no comment. By explicitly commenting empty
constructors it is easier to distinguish between intentional (commented)
and unintentional empty constructors.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ConstructorDeclaration[@Visibility != "private"]
                        [not(
                               pmd-java:hasAnnotation('javax.inject.Inject')
                            or pmd-java:hasAnnotation('org.springframework.beans.factory.annotation.Autowired')
                        )]
                        [Block[
                            @containsComment = false()
                            and (count(*) = 0 or ($ignoreExplicitConstructorInvocation = true() and count(*) = 1 and ExplicitConstructorInvocation))
                        ]]</value>
         </property>
         <property description="Ignore explicit constructor invocation when deciding whether constructor is empty or not"
                   name="ignoreExplicitConstructorInvocation"
                   type="Boolean">
            <value>false</value>
         </property>
      </properties>
      <example>

public Foo() {
  // This constructor is intentionally empty. Nothing special is needed here.
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.documentation.CommentRequiredRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_documentation.html#commentrequired"
         language="java"
         message="Comment is required"
         name="CommentRequired"
         since="5.1">
      <description>
Denotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.
        </description>
      <priority>3</priority>
      <example>

/**
*
*
* @author Jon Doe
*/

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.ConfusingTernaryRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#confusingternary"
         language="java"
         message="Avoid if (x != y) ..; else ..;"
         name="ConfusingTernary"
         since="1.9">
      <description>
Avoid negation within an "if" expression with an "else" clause.  For example, rephrase:
`if (x != y) diff(); else same();` as: `if (x == y) same(); else diff();`.

Most "if (x != y)" cases without an "else" are often return cases, so consistent use of this
rule makes the code easier to read.  Also, this resolves trivial ordering problems, such
as "does the error case go first?" or "does the common case go first?".
        </description>
      <priority>3</priority>
      <example>

boolean bar(int x, int y) {
    return (x != y) ? diff : same;
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.MissingOverrideRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#missingoverride"
         language="java"
         message="The method ''{0}'' is missing an @Override annotation."
         minimumLanguageVersion="1.5"
         name="MissingOverride"
         since="6.2.0">
      <description>
            Annotating overridden methods with @Override ensures at compile time that
            the method really overrides one, which helps refactoring and clarifies intent.
        </description>
      <priority>3</priority>
      <example>
            
            public class Foo implements Runnable {
                // This method is overridden, and should have an @Override annotation
                public void run() {

                }
            }
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.AvoidDuplicateLiteralsRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidduplicateliterals"
         language="java"
         message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}"
         name="AvoidDuplicateLiterals"
         since="1.0">
      <description>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
        </description>
      <priority>3</priority>
      <example>

private void bar() {
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
}
private void buz(String x) {}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#comparisonwithnan"
         language="java"
         message="Comparisons with NaN always return false"
         name="ComparisonWithNaN"
         since="6.36.0">
      <description>
            Reports comparisons with double and float `NaN` (Not-a-Number) values.
            These are [specified](https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1)
            to have unintuitive behavior: NaN is considered unequal to itself.
            This means a check like `someDouble == Double.NaN` will always return
            false, even if `someDouble` is really the NaN value. To test whether a
            value is the NaN value, one should instead use `Double.isNaN(someDouble)`
            (or `Float.isNaN`). The `!=` operator should be treated similarly.
            Finally, comparisons like `someDouble &lt;= Double.NaN` are nonsensical
            and will always evaluate to false.
            
            This rule has been renamed from "BadComparison" in PMD 6.36.0.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression[@Operator = ("==", "!=", "&lt;=", "&gt;=", "&lt;", "&gt;")]/FieldAccess[@Name='NaN' and (pmd-java:typeIs('double') or pmd-java:typeIs('float'))]</value>
         </property>
      </properties>
      <example>
            
boolean x = (y == Double.NaN);

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#avoidrethrowingexception"
         language="java"
         message="A catch statement that catches an exception only to rethrow it should be avoided."
         name="AvoidRethrowingException"
         since="3.8">
      <description>
Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//CatchClause[
  CatchParameter/VariableId/@Name
= Block[@Size = 1]/ThrowStatement/VariableAccess/@Name]</value>
         </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    }  catch (SomeException se) {
       throw se;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_ecmascript_bestpractices.html#avoidwithstatement"
         language="ecmascript"
         message="Avoid using with - it's bad news"
         name="AvoidWithStatement"
         since="5.0.1">
      <description>Avoid using with - it's bad news</description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//WithStatement</value>
         </property>
      </properties>
      <example>

with (object) {
    property = 3; // Might be on object, might be on window: who knows.
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname"
         language="java"
         message="The return type of the clone() method must be the class name when implements Cloneable"
         minimumLanguageVersion="1.5"
         name="CloneMethodReturnTypeMustMatchClassName"
         since="5.4.0">
      <description>
If a class implements `Cloneable` the return type of the method `clone()` must be the class name. That way, the caller
of the clone method doesn't need to cast the returned clone to the correct type.

Note: Such a covariant return type is only possible with Java 1.5 or higher.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration
    [@Name = 'clone']
    [@Arity = 0]
    [ClassType[1]/@SimpleName != ancestor::ClassDeclaration[1]/@SimpleName]</value>
         </property>
      </properties>
      <example>

public class Foo implements Cloneable {
    @Override
    protected Object clone() { // Violation, Object must be Foo
    }
}

public class Foo implements Cloneable {
    @Override
    public Foo clone() { //Ok
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.UnusedFormalParameterRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#unusedformalparameter"
         language="java"
         message="Avoid unused {0} parameters such as ''{1}''."
         name="UnusedFormalParameter"
         since="0.8">
      <description>
Reports parameters of methods and constructors that are not referenced them in the method body.
Parameters whose name starts with `ignored` or `unused` are filtered out.

Removing unused formal parameters from public methods could cause a ripple effect through the code base.
Hence, by default, this rule only considers private methods. To include non-private methods, set the
`checkAll` property to `true`.

        </description>
      <priority>3</priority>
      <example>

public class Foo {
    private void bar(String howdy) {
        // howdy is not used
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#compareobjectswithequals"
         language="java"
         message="Use equals() to compare object references."
         name="CompareObjectsWithEquals"
         since="3.2">
      <description>
Use `equals()` to compare object references; avoid comparing them with `==`.

Since comparing objects with named constants is useful in some cases (eg, when
defining constants for sentinel values), the rule ignores comparisons against
fields with all-caps name (eg `this == SENTINEL`), which is a common naming
convention for constant fields.

You may allow some types to be compared by reference by listing the exceptions
in the `typesThatCompareByReference` property.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//InfixExpression
    [@Operator = ("==", "!=")]
    [count(*
        [not(self::NullLiteral)]
        [pmd-java:typeIs('java.lang.Object')]
        [not(some $t in $typesThatCompareByReference satisfies pmd-java:typeIs($t))]
      ) = 2
    ]
    [not(ancestor::MethodDeclaration[1][@Name = "equals"])]
    (: Is not a field access with an all-caps identifier :)
    [not(FieldAccess[upper-case(@Name)=@Name]
     or VariableAccess[upper-case(@Name)=@Name])]</value>
         </property>
         <property description="List of canonical type names for which reference comparison is allowed."
                   name="typesThatCompareByReference"
                   type="List[String]">
            <value>java.lang.Enum,java.lang.Class</value>
         </property>
      </properties>
      <example>

class Foo {
  boolean bar(String a, String b) {
    return a == b;
  }
}


        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.multithreading.UnsynchronizedStaticFormatterRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter"
         language="java"
         message="Static Formatter objects should be accessed in a synchronized manner"
         name="UnsynchronizedStaticFormatter"
         since="6.11.0">
      <description>
Instances of `java.text.Format` are generally not synchronized.
Sun recommends using separate format instances for each thread.
If multiple threads must access a static formatter, the formatter must be
synchronized on block level.
        </description>
      <priority>3</priority>
      <example>

public class Foo {
    private static final SimpleDateFormat sdf = new SimpleDateFormat();
    void bar() {
        sdf.format(); // poor, no thread-safety
    }
    void foo() {
        synchronized (sdf) { // preferred
            sdf.format();
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryBoxingRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessaryboxing"
         language="java"
         message="Unnecessary {0}"
         minimumLanguageVersion="1.5"
         name="UnnecessaryBoxing"
         since="7.0.0">
      <description>
            Reports explicit boxing and unboxing conversions that may safely be removed,
            either because they would be inserted by the compiler automatically,
            or because they're semantically a noop (eg unboxing a value to rebox it immediately).

            Note that this only handles boxing and unboxing conversions occurring through
            calls to `valueOf` or one of the `intValue`, `byteValue`, etc. methods. Casts
            that command a conversion are reported by {% rule UnnecessaryCast %} instead.
        </description>
      <priority>3</priority>
      <example>
{
        // Instead of
        Integer integer = Integer.valueOf(2);
        // you may just write
        Integer integer = 2;

        int i = integer.intValue(); // similarly for unboxing

        // Instead of
        int x = Integer.valueOf("42");
        // you may just write
        int x = Integer.parseInt("42");
}
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidenumasidentifier"
         language="java"
         maximumLanguageVersion="1.4"
         message="Avoid using enum as an identifier; it's a reserved word in JDK 1.5"
         name="AvoidEnumAsIdentifier"
         since="3.4">
      <description>
Use of the term `enum` will conflict with newer versions of Java since it is a reserved word.

Since Java 1.5, the token `enum` became a reserved word and using it as an identifier will
result in a compilation failure for Java 1.5 and later. This rule is therefore only useful
for old Java code before Java 1.5. It can be used to identify problematic code prior to a Java update.
        </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>//VariableId[@Name='enum']</value>
         </property>
      </properties>
      <example>

public class A {
    public class Foo {
        String enum = "foo";
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#toomanystaticimports"
         language="java"
         message="Too many static imports may lead to messy code"
         name="TooManyStaticImports"
         since="4.1">
      <description>
If you overuse the static import feature, it can make your program unreadable and
unmaintainable, polluting its namespace with all the static members you import.
Readers of your code (including you, a few months after you wrote it) will not know
which class a static member comes from (Sun 1.5 Language Guide).
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>.[count(ImportDeclaration[@Static = true()]) &gt; $maximumStaticImports]</value>
         </property>
         <property description="All static imports can be disallowed by setting this to 0"
                   max="100"
                   min="0"
                   name="maximumStaticImports"
                   type="Integer">
            <value>4</value>
         </property>
      </properties>
      <example>

import static Lennon;
import static Ringo;
import static George;
import static Paul;
import static Yoko; // Too much !

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.InvalidJavaBeanRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#invalidjavabean"
         language="java"
         message="The bean ''{0}'' is missing a getter for property ''{1}''."
         name="InvalidJavaBean"
         since="6.52.0">
      <description>
Identifies beans, that don't follow the [JavaBeans API specification](https://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/).

Each non-static field should have both a getter and a setter method. If the field is just used internally and is not
a bean property, then the field should be marked as `transient`.

The rule verifies that the type of the field is the same as the result type of the getter. And that this type matches
the type used in the setter.

The rule also checks, that there is a no-arg or default constructor available.

Optionally the rule also verifies, that the bean implements `java.io.Serializable`. While this is a requirement for the
original JavaBeans specification, frameworks nowadays don't strictly require this anymore.

In order to avoid many false positives in classes that are not beans, the rule needs to be explicitly
enabled by configuring the property `packages`.
        </description>
      <priority>3</priority>
      <example>

package org.example.beans;
public class MyBean {        // &lt;-- bean is not serializable, missing "implements Serializable"
    private String label;    // &lt;-- missing setter for property "label"

    public String getLabel() {
        return label;
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname"
         language="java"
         message="Unnecessary qualifier ''{0}'': ''{1}'' is already in scope{2}"
         name="UnnecessaryFullyQualifiedName"
         since="5.0">
      <description>
Import statements allow the use of non-fully qualified names.  The use of a fully qualified name
which is covered by an import statement is redundant.  Consider using the non-fully qualified name.
        </description>
      <priority>4</priority>
      <example>

import java.util.List;

public class Foo {
    private java.util.List list1;   // Unnecessary FQN
    private List list2;             // More appropriate given import of 'java.util.List'
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryLocalBeforeReturnRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn"
         language="java"
         message="Consider simply returning the value vs storing it in local variable ''{0}''"
         name="UnnecessaryLocalBeforeReturn"
         since="3.3">
      <description>
Avoid the creation of unnecessary local variables
        </description>
      <priority>3</priority>
      <example>

public class Foo {
   public int foo() {
     int x = doSomething();
     return x;  // instead, just 'return doSomething();'
   }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.SimplifiableTestAssertionRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#simplifiabletestassertion"
         language="java"
         message="Assertion may be simplified using {0}"
         name="SimplifiableTestAssertion"
         since="6.37.0">
      <description>
            Reports test assertions that may be simplified using a more specific
            assertion method. This enables better error messages, and makes the
            assertions more readable.
        </description>
      <priority>3</priority>
      <example>

import org.junit.Test;
import static org.junit.Assert.*;

class SomeTestClass {
    Object a,b;
    @Test
    void testMethod() {
        assertTrue(a.equals(b)); // could be assertEquals(a, b);
        assertTrue(!a.equals(b)); // could be assertNotEquals(a, b);

        assertTrue(!something); // could be assertFalse(something);
        assertFalse(!something); // could be assertTrue(something);

        assertTrue(a == b); // could be assertSame(a, b);
        assertTrue(a != b); // could be assertNotSame(a, b);

        assertTrue(a == null); // could be assertNull(a);
        assertTrue(a != null); // could be assertNotNull(a);
    }
}
            
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#equalsnull"
         language="java"
         message="Avoid using equals() to compare against null"
         name="EqualsNull"
         since="1.9">
      <description>
Tests for null should not use the equals() method. The '==' operator should be used instead.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>//MethodCall[@MethodName = "equals" and ArgumentList[count(*) = 1 and NullLiteral]]</value>
         </property>
      </properties>
      <example>

String x = "foo";

if (x.equals(null)) {   // bad form
    doSomething();
}

if (x == null) {        // preferred
    doSomething();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningParametersRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#avoidreassigningparameters"
         language="java"
         message="Avoid reassigning parameters such as ''{0}''"
         name="AvoidReassigningParameters"
         since="1.0">
      <description>
Reassigning values to incoming parameters of a method or constructor is not recommended, as this can
make the code more difficult to understand. The code is often read with the assumption that parameter values
don't change and an assignment violates therefore the principle of least astonishment. This is especially a
problem if the parameter is documented e.g. in the method's javadoc and the new content differs from the original
documented content.

Use temporary local variables instead. This allows you to assign a new name, which makes the code better
understandable.

Note that this rule considers both methods and constructors. If there are multiple assignments for a formal
parameter, then only the first assignment is reported.
        </description>
      <priority>2</priority>
      <example>

public class Hello {
  private void greet(String name) {
    name = name.trim();
    System.out.println("Hello " + name);

    // preferred
    String trimmedName = name.trim();
    System.out.println("Hello " + trimmedName);
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.errorprone.CloseResourceRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#closeresource"
         language="java"
         message="Ensure that resources like this {0} object are closed after use"
         name="CloseResource"
         since="1.2.2">
      <description>
Ensure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects
and any subtype of `java.lang.AutoCloseable`) are always closed after use.
Failing to do so might result in resource leaks.

Note: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers
on any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting
the types, if the type resolution / auxclasspath is not correctly setup.

Note: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects
now cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,
just remove "AutoCloseable" from the types.
        </description>
      <priority>3</priority>
      <example>

public class Bar {
    public void withSQL() {
        Connection c = pool.getConnection();
        try {
            // do stuff
        } catch (SQLException ex) {
           // handle exception
        } finally {
            // oops, should close the connection using 'close'!
            // c.close();
        }
    }

    public void withFile() {
        InputStream file = new FileInputStream(new File("/tmp/foo"));
        try {
            int c = file.in();
        } catch (IOException e) {
            // handle exception
        } finally {
            // TODO: close file
        }
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname"
         language="java"
         message="Field {0} has the same name as a method"
         name="AvoidFieldNameMatchingMethodName"
         since="3.0">
      <description>
It can be confusing to have a field name with the same name as a method. While this is permitted,
having information (field) and actions (method) is not clear naming. Developers versed in
Smalltalk often prefer this approach as the methods denote accessor methods.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//FieldDeclaration/VariableDeclarator/VariableId
    [some $method in ../../..[self::ClassBody or self::EnumBody]/MethodDeclaration
     satisfies lower-case(@Name) = lower-case($method/@Name)]</value>
         </property>
      </properties>
      <example>

public class Foo {
    Object bar;
    // bar is data or an action or both?
    void bar() {
    }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.DataClassRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_design.html#dataclass"
         language="java"
         message="The class ''{0}'' is suspected to be a Data Class (WOC={1}, NOPA={2}, NOAM={3}, WMC={4})"
         name="DataClass"
         since="6.0.0">
      <description>
Data Classes are simple data holders, which reveal most of their state, and
without complex functionality. The lack of functionality may indicate that
their behaviour is defined elsewhere, which is a sign of poor data-behaviour
proximity. By directly exposing their internals, Data Classes break encapsulation,
and therefore reduce the system's maintainability and understandability. Moreover,
classes tend to strongly rely on their data representation, which makes for a brittle
design.

Refactoring a Data Class should focus on restoring a good data-behaviour proximity. In
most cases, that means moving the operations defined on the data back into the class.
In some other cases it may make sense to remove entirely the class and move the data
into the former client classes.

The rule uses metrics to implement its detection strategy. The violation message
gives information about the values of these metrics:
* WMC: a class complexity measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %}
* WOC: a 'non-triviality' measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHT_OF_CLASS %}
* NOPA: number of public attributes, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_PUBLIC_FIELDS %}
* NOAM: number of public accessor methods, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_ACCESSORS %}

The rule identifies a god class by looking for classes which have all of the following properties:
* High NOPA + NOAM
* Low WOC
* Low WMC
        </description>
      <priority>3</priority>
      <example>

public class DataClass {

  // class exposes public attributes
  public String name = "";
  public int bar = 0;
  public int na = 0;

  private int bee = 0;

  // and private ones through getters
  public void setBee(int n) {
    bee = n;
  }
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#useshortarrayinitializer"
         language="java"
         message="Array initialization can be written shorter"
         name="UseShortArrayInitializer"
         since="6.15.0">
      <description>

When declaring and initializing array fields or variables, it is not necessary to explicitly create a new array
using `new`. Instead one can simply define the initial content of the array as a expression in curly braces.

E.g. `int[] x = new int[] { 1, 2, 3 };` can be written as `int[] x = { 1, 2, 3 };`.

        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//VariableDeclarator
    [VariableId[@TypeInferred = false() and @ArrayType = true()]]
    [ArrayAllocation/ArrayInitializer]</value>
         </property>
      </properties>
      <example>

Foo[] x = new Foo[] { ... }; // Overly verbose
Foo[] x = { ... }; //Equivalent to above line

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_errorprone.html#finalizedoesnotcallsuperfinalize"
         language="java"
         message="Last statement in finalize method should be a call to super.finalize()"
         name="FinalizeDoesNotCallSuperFinalize"
         since="1.5">
      <description>
If the finalize() is implemented, its last action should be to call super.finalize. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//MethodDeclaration[@Name = "finalize"][@Arity = 0]
   /Block/*[last()]
      [not(MethodCall[@MethodName = "finalize"]/SuperExpression)]
      [not(FinallyClause/Block/ExpressionStatement/
          MethodCall[@MethodName = "finalize"]/SuperExpression)]</value>
         </property>
      </properties>
      <example>

protected void finalize() {
    something();
    // neglected to call super.finalize()
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#packagecase"
         language="java"
         message="Package name contains upper case characters"
         name="PackageCase"
         since="3.3">
      <description>
Detects when a package definition contains uppercase characters.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//PackageDeclaration[lower-case(@Name) != @Name]</value>
         </property>
      </properties>
      <example>

package com.MyCompany;  // should be lowercase name

public class SomeClass {
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals"
         language="java"
         message="Number {0} should separate every third digit with an underscore"
         minimumLanguageVersion="1.7"
         name="UseUnderscoresInNumericLiterals"
         since="6.10.0">
      <description>
            Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that
            numeric literals above a certain length use these underscores to increase readability.

            The rule only supports decimal (base 10) literals for now. The acceptable length under which literals
            are not required to have underscores is configurable via a property. Even under that length, underscores
            that are misplaced (not making groups of 3 digits) are reported.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//NumericLiteral
 (: Filter out literals in base other than 10 :)
 [@Base = 10]
 (: Filter out ignored field name :)
 [not(ancestor::VariableDeclarator[1][@Name = 'serialVersionUID'])]
 [
   some $num in tokenize(@Image, "[dDfFlLeE+\-]")
   satisfies not(
                  ( contains($num, ".")
                    and string-length(substring-before($num, ".")) &lt;= $acceptableDecimalLength
                    and string-length(substring-after($num, ".")) &lt;= $acceptableDecimalLength
                    or string-length($num) &lt;= $acceptableDecimalLength
                  )
                  and not(contains($num,"_"))
                  or matches($num, "^[0-9]{1,3}(_[0-9]{3})*(\.([0-9]{3}_)*[0-9]{1,3})?$")
                )
 ]</value>
         </property>
         <property description="Length under which literals in base 10 are not required to have underscores"
                   max="1000"
                   min="3"
                   name="acceptableDecimalLength"
                   type="Integer">
            <value>4</value>
         </property>
      </properties>
      <example>
            
public class Foo {
    private int num = 1000000; // should be 1_000_000
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
         deprecated="false"
         externalInfoUrl="https://docs.pmd-code.org/pmd-doc-7.0.0/pmd_rules_java_bestpractices.html#constantsininterface"
         language="java"
         message="Using constants in interfaces is a bad practice."
         name="ConstantsInInterface"
         since="5.5">
      <description>
Using constants in interfaces is a bad practice. Interfaces define types, constants are implementation details better placed in classes or enums. If the constants are best viewed as members of an enumerated type, you should export them with an enum type.
For other scenarios, consider using a utility class. See Effective Java's 'Use interfaces only to define types'.
        </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//ClassDeclaration[@Interface = true()][$ignoreIfHasMethods= false() or not(ClassBody/MethodDeclaration)]/ClassBody/FieldDeclaration</value>
         </property>
         <property description="Whether to ignore constants in interfaces if the interface defines any methods"
                   name="ignoreIfHasMethods"
                   type="Boolean">
            <value>true</value>
         </property>
      </properties>
      <example>

public interface ConstantInterface {
    public static final int CONST1 = 1; // violation, no fields allowed in interface!
    static final int CONST2 = 1;        // violation, no fields allowed in interface!
    final int CONST3 = 1;               // violation, no fields allowed in interface!
    int CONST4 = 1;                     // violation, no fields allowed in interface!
}

// with ignoreIfHasMethods = false
public interface AnotherConstantInterface {
    public static final int CONST1 = 1; // violation, no fields allowed in interface!

    int anyMethod();
}

// with ignoreIfHasMethods = true
public interface YetAnotherConstantInterface {
    public static final int CONST1 = 1; // no violation

    int anyMethod();
}
 
        </example>
   </rule>
</ruleset>
